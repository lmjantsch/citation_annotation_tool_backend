--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';
ALTER ROLE authenticator SET "pgrst.db_aggregates_enabled" TO 'true';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.6 (Debian 15.6-1.pgdg110+2)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.6 (Debian 15.6-1.pgdg110+2)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: moddatetime; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS moddatetime WITH SCHEMA extensions;


--
-- Name: EXTENSION moddatetime; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION moddatetime IS 'functions for tracking last modification time';


--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
  insert into public.users (id)
  values (new.id);
  return new;
end;
$$;


ALTER FUNCTION public.handle_new_user() OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
    declare
        -- Regclass of the table e.g. public.notes
        entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

        -- I, U, D, T: insert, update ...
        action realtime.action = (
            case wal ->> 'action'
                when 'I' then 'INSERT'
                when 'U' then 'UPDATE'
                when 'D' then 'DELETE'
                else 'ERROR'
            end
        );

        -- Is row level security enabled for the table
        is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

        subscriptions realtime.subscription[] = array_agg(subs)
            from
                realtime.subscription subs
            where
                subs.entity = entity_;

        -- Subscription vars
        roles regrole[] = array_agg(distinct us.claims_role)
            from
                unnest(subscriptions) us;

        working_role regrole;
        claimed_role regrole;
        claims jsonb;

        subscription_id uuid;
        subscription_has_access bool;
        visible_to_subscription_ids uuid[] = '{}';

        -- structured info for wal's columns
        columns realtime.wal_column[];
        -- previous identity values for update/delete
        old_columns realtime.wal_column[];

        error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

        -- Primary jsonb output for record
        output jsonb;

    begin
        perform set_config('role', null, true);

        columns =
            array_agg(
                (
                    x->>'name',
                    x->>'type',
                    x->>'typeoid',
                    realtime.cast(
                        (x->'value') #>> '{}',
                        coalesce(
                            (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                            (x->>'type')::regtype
                        )
                    ),
                    (pks ->> 'name') is not null,
                    true
                )::realtime.wal_column
            )
            from
                jsonb_array_elements(wal -> 'columns') x
                left join jsonb_array_elements(wal -> 'pk') pks
                    on (x ->> 'name') = (pks ->> 'name');

        old_columns =
            array_agg(
                (
                    x->>'name',
                    x->>'type',
                    x->>'typeoid',
                    realtime.cast(
                        (x->'value') #>> '{}',
                        coalesce(
                            (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                            (x->>'type')::regtype
                        )
                    ),
                    (pks ->> 'name') is not null,
                    true
                )::realtime.wal_column
            )
            from
                jsonb_array_elements(wal -> 'identity') x
                left join jsonb_array_elements(wal -> 'pk') pks
                    on (x ->> 'name') = (pks ->> 'name');

        for working_role in select * from unnest(roles) loop

            -- Update `is_selectable` for columns and old_columns
            columns =
                array_agg(
                    (
                        c.name,
                        c.type_name,
                        c.type_oid,
                        c.value,
                        c.is_pkey,
                        pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                    )::realtime.wal_column
                )
                from
                    unnest(columns) c;

            old_columns =
                    array_agg(
                        (
                            c.name,
                            c.type_name,
                            c.type_oid,
                            c.value,
                            c.is_pkey,
                            pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                        )::realtime.wal_column
                    )
                    from
                        unnest(old_columns) c;

            if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
                return next (
                    jsonb_build_object(
                        'schema', wal ->> 'schema',
                        'table', wal ->> 'table',
                        'type', action
                    ),
                    is_rls_enabled,
                    -- subscriptions is already filtered by entity
                    (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
                    array['Error 400: Bad Request, no primary key']
                )::realtime.wal_rls;

            -- The claims role does not have SELECT permission to the primary key of entity
            elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
                return next (
                    jsonb_build_object(
                        'schema', wal ->> 'schema',
                        'table', wal ->> 'table',
                        'type', action
                    ),
                    is_rls_enabled,
                    (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
                    array['Error 401: Unauthorized']
                )::realtime.wal_rls;

            else
                output = jsonb_build_object(
                    'schema', wal ->> 'schema',
                    'table', wal ->> 'table',
                    'type', action,
                    'commit_timestamp', to_char(
                        ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                        'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
                    ),
                    'columns', (
                        select
                            jsonb_agg(
                                jsonb_build_object(
                                    'name', pa.attname,
                                    'type', pt.typname
                                )
                                order by pa.attnum asc
                            )
                        from
                            pg_attribute pa
                            join pg_type pt
                                on pa.atttypid = pt.oid
                        where
                            attrelid = entity_
                            and attnum > 0
                            and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
                    )
                )
                -- Add "record" key for insert and update
                || case
                    when action in ('INSERT', 'UPDATE') then
                        jsonb_build_object(
                            'record',
                            (
                                select
                                    jsonb_object_agg(
                                        -- if unchanged toast, get column name and value from old record
                                        coalesce((c).name, (oc).name),
                                        case
                                            when (c).name is null then (oc).value
                                            else (c).value
                                        end
                                    )
                                from
                                    unnest(columns) c
                                    full outer join unnest(old_columns) oc
                                        on (c).name = (oc).name
                                where
                                    coalesce((c).is_selectable, (oc).is_selectable)
                                    and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            )
                        )
                    else '{}'::jsonb
                end
                -- Add "old_record" key for update and delete
                || case
                    when action = 'UPDATE' then
                        jsonb_build_object(
                                'old_record',
                                (
                                    select jsonb_object_agg((c).name, (c).value)
                                    from unnest(old_columns) c
                                    where
                                        (c).is_selectable
                                        and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                                )
                            )
                    when action = 'DELETE' then
                        jsonb_build_object(
                            'old_record',
                            (
                                select jsonb_object_agg((c).name, (c).value)
                                from unnest(old_columns) c
                                where
                                    (c).is_selectable
                                    and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                                    and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                            )
                        )
                    else '{}'::jsonb
                end;

                -- Create the prepared statement
                if is_rls_enabled and action <> 'DELETE' then
                    if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                        deallocate walrus_rls_stmt;
                    end if;
                    execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
                end if;

                visible_to_subscription_ids = '{}';

                for subscription_id, claims in (
                        select
                            subs.subscription_id,
                            subs.claims
                        from
                            unnest(subscriptions) subs
                        where
                            subs.entity = entity_
                            and subs.claims_role = working_role
                            and (
                                realtime.is_visible_through_filters(columns, subs.filters)
                                or action = 'DELETE'
                            )
                ) loop

                    if not is_rls_enabled or action = 'DELETE' then
                        visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                    else
                        -- Check if RLS allows the role to see the record
                        perform
                            set_config('role', working_role::text, true),
                            set_config('request.jwt.claims', claims::text, true);

                        execute 'execute walrus_rls_stmt' into subscription_has_access;

                        if subscription_has_access then
                            visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                        end if;
                    end if;
                end loop;

                perform set_config('role', null, true);

                return next (
                    output,
                    is_rls_enabled,
                    visible_to_subscription_ids,
                    case
                        when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                        else '{}'
                    end
                )::realtime.wal_rls;

            end if;
        end loop;

        perform set_config('role', null, true);
    end;
    $$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: channel_name(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.channel_name() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.channel_name', true), '')::text;
$$;


ALTER FUNCTION realtime.channel_name() OWNER TO supabase_realtime_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(regexp_split_to_array(objects.name, ''/''), 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(regexp_split_to_array(objects.name, ''/''), 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: annotations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.annotations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid DEFAULT gen_random_uuid() NOT NULL,
    ref_id uuid DEFAULT gen_random_uuid() NOT NULL,
    status character varying DEFAULT 'outstanding'::character varying NOT NULL,
    comment text,
    updated_at timestamp with time zone DEFAULT now(),
    annotation_location numeric[],
    guideline_version numeric DEFAULT 1.0 NOT NULL
);


ALTER TABLE public.annotations OWNER TO postgres;

--
-- Name: documents; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.documents (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    title character varying NOT NULL,
    pub_year smallint NOT NULL,
    abstract text,
    doi character varying,
    authors text
);


ALTER TABLE public.documents OWNER TO postgres;

--
-- Name: paragraphs; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.paragraphs (
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    doc_id uuid NOT NULL,
    text text NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE public.paragraphs OWNER TO postgres;

--
-- Name: progress_count; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.progress_count AS
 SELECT annotations.user_id,
    annotations.status,
    count(*) AS count
   FROM public.annotations
  GROUP BY annotations.status, annotations.user_id;


ALTER TABLE public.progress_count OWNER TO postgres;

--
-- Name: quotes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.quotes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    par_id uuid NOT NULL,
    cited_doc uuid,
    ref_loc smallint NOT NULL,
    annotation_count smallint NOT NULL,
    inter_annotation_agreement real
);


ALTER TABLE public.quotes OWNER TO postgres;

--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id uuid NOT NULL,
    first_name character varying,
    created_at timestamp without time zone DEFAULT now(),
    last_name character varying,
    role text DEFAULT 'annotator'::text
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: broadcasts; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.broadcasts (
    id bigint NOT NULL,
    channel_id bigint NOT NULL,
    "check" boolean DEFAULT false NOT NULL,
    inserted_at timestamp(0) without time zone NOT NULL,
    updated_at timestamp(0) without time zone NOT NULL
);


ALTER TABLE realtime.broadcasts OWNER TO supabase_realtime_admin;

--
-- Name: broadcasts_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE SEQUENCE realtime.broadcasts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE realtime.broadcasts_id_seq OWNER TO supabase_realtime_admin;

--
-- Name: broadcasts_id_seq; Type: SEQUENCE OWNED BY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER SEQUENCE realtime.broadcasts_id_seq OWNED BY realtime.broadcasts.id;


--
-- Name: channels; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.channels (
    id bigint NOT NULL,
    name character varying(255) NOT NULL,
    inserted_at timestamp(0) without time zone NOT NULL,
    updated_at timestamp(0) without time zone NOT NULL,
    "check" boolean DEFAULT false
);


ALTER TABLE realtime.channels OWNER TO supabase_realtime_admin;

--
-- Name: channels_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE SEQUENCE realtime.channels_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE realtime.channels_id_seq OWNER TO supabase_realtime_admin;

--
-- Name: channels_id_seq; Type: SEQUENCE OWNED BY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER SEQUENCE realtime.channels_id_seq OWNED BY realtime.channels.id;


--
-- Name: presences; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.presences (
    id bigint NOT NULL,
    channel_id bigint NOT NULL,
    "check" boolean DEFAULT false NOT NULL,
    inserted_at timestamp(0) without time zone NOT NULL,
    updated_at timestamp(0) without time zone NOT NULL
);


ALTER TABLE realtime.presences OWNER TO supabase_realtime_admin;

--
-- Name: presences_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE SEQUENCE realtime.presences_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE realtime.presences_id_seq OWNER TO supabase_realtime_admin;

--
-- Name: presences_id_seq; Type: SEQUENCE OWNED BY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER SEQUENCE realtime.presences_id_seq OWNED BY realtime.presences.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER TABLE vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: broadcasts id; Type: DEFAULT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.broadcasts ALTER COLUMN id SET DEFAULT nextval('realtime.broadcasts_id_seq'::regclass);


--
-- Name: channels id; Type: DEFAULT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.channels ALTER COLUMN id SET DEFAULT nextval('realtime.channels_id_seq'::regclass);


--
-- Name: presences id; Type: DEFAULT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.presences ALTER COLUMN id SET DEFAULT nextval('realtime.presences_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	5ad0ff92-045f-4721-9a3f-991eacac762d	{"action":"user_confirmation_requested","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-03-28 07:26:46.179612+00	
00000000-0000-0000-0000-000000000000	6d708ac4-34a3-4471-bb7c-bc1e38d43563	{"action":"user_signedup","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"team"}	2024-03-28 07:27:36.151978+00	
00000000-0000-0000-0000-000000000000	7c0fb69b-67be-4c48-9905-b288fd1cd0c6	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-28 07:28:13.897215+00	
00000000-0000-0000-0000-000000000000	83e8db7a-3696-4ed4-bf6d-8a0c2ccf3214	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-28 09:04:17.223781+00	
00000000-0000-0000-0000-000000000000	b2eb2f49-c012-418e-9615-6a76c2ce405d	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-28 09:04:17.224368+00	
00000000-0000-0000-0000-000000000000	34ac0ea8-e0de-4587-82d6-54d4633cbc5c	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-28 09:34:00.722597+00	
00000000-0000-0000-0000-000000000000	1d7ea864-03b0-4e78-bfe4-f2ebfb337cef	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-28 09:35:06.04352+00	
00000000-0000-0000-0000-000000000000	44436262-6dc2-4d97-babc-01ca15bd72dc	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-28 14:50:47.718095+00	
00000000-0000-0000-0000-000000000000	867a0562-fbe7-408f-8cf8-c12c7ddf48b0	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-28 14:50:47.724736+00	
00000000-0000-0000-0000-000000000000	24359692-a829-4353-b132-d5ca9a25baa2	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-28 14:51:09.280733+00	
00000000-0000-0000-0000-000000000000	33f9cf30-7a51-48cd-9aa4-b75f29293e11	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-28 15:56:46.667506+00	
00000000-0000-0000-0000-000000000000	6bc51f1c-7e6d-4c44-8aa2-5efd9630658e	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-28 15:56:46.676186+00	
00000000-0000-0000-0000-000000000000	8911e2f1-a54f-440e-a293-d9b466a52026	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-28 16:56:45.043405+00	
00000000-0000-0000-0000-000000000000	bd387b0b-8087-4c6d-ac2b-aa7fbf8568ef	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-28 16:56:45.048886+00	
00000000-0000-0000-0000-000000000000	3528d3e0-507d-4f4a-ab58-338d6bed8060	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 00:14:47.092594+00	
00000000-0000-0000-0000-000000000000	84ae53fa-4a1b-44a3-b6ad-b91db9bc6735	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 00:14:47.101765+00	
00000000-0000-0000-0000-000000000000	54fb732c-06ce-4173-a3ce-1beb4b83d050	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 00:14:49.476319+00	
00000000-0000-0000-0000-000000000000	1ed1fb0e-699b-4f8f-aabf-9f1e6fe87323	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 01:20:02.002543+00	
00000000-0000-0000-0000-000000000000	4f453d96-497b-4ef2-8f34-9e2ca1df2609	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 01:20:02.008561+00	
00000000-0000-0000-0000-000000000000	7e3c8f02-fb97-418e-b6f7-972ba33ca652	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 02:20:17.79548+00	
00000000-0000-0000-0000-000000000000	9dfdc2de-262d-42cf-bc87-3f68d4c23c87	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 02:20:17.801279+00	
00000000-0000-0000-0000-000000000000	a91a44d9-3add-4481-a052-1dde0d2b9f4e	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 03:18:32.896459+00	
00000000-0000-0000-0000-000000000000	2d57d386-923e-4bfa-99fe-cd56001a4810	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 03:18:32.900988+00	
00000000-0000-0000-0000-000000000000	cc8fe99c-ecd2-41d0-8ff1-3794bbdf0c04	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 04:59:26.051811+00	
00000000-0000-0000-0000-000000000000	0e297543-0931-4843-ae6b-7dfc57e895a5	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 04:59:26.053228+00	
00000000-0000-0000-0000-000000000000	801c94d3-1058-47cf-a25a-35c0d6509e5f	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-29 05:07:28.481858+00	
00000000-0000-0000-0000-000000000000	e78e48d5-983c-4da1-963e-c86c08caba72	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 06:15:56.098472+00	
00000000-0000-0000-0000-000000000000	ede63845-cf04-4c4c-9688-f71b2ae5d265	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 06:15:56.100465+00	
00000000-0000-0000-0000-000000000000	253439e8-3ea9-4743-b584-7e3f34c193d4	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-29 06:16:43.157342+00	
00000000-0000-0000-0000-000000000000	7ce847b1-91c4-4cbc-91c1-ccc247b93c89	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-29 06:36:19.674663+00	
00000000-0000-0000-0000-000000000000	3db59c16-c9e6-4b9e-a816-3ac27dc94b63	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-29 06:36:51.871718+00	
00000000-0000-0000-0000-000000000000	03874b88-0892-40b9-9d72-7ebadb5fefe6	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-29 07:23:31.397342+00	
00000000-0000-0000-0000-000000000000	8c58a173-5b50-46bc-8097-80a247690687	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-29 07:26:51.635896+00	
00000000-0000-0000-0000-000000000000	e4a0e322-f8d5-43ed-8075-125cfda5239a	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 08:28:58.454202+00	
00000000-0000-0000-0000-000000000000	ba43970e-c9dd-4aae-afa8-8c241944f12d	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 08:28:58.459126+00	
00000000-0000-0000-0000-000000000000	a4465201-79b4-410e-b8cb-1d4e29a679ad	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 08:29:26.33765+00	
00000000-0000-0000-0000-000000000000	8af996bc-1176-4ac4-9def-b81983ea8748	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-29 08:29:26.338727+00	
00000000-0000-0000-0000-000000000000	72f746b0-fab2-419c-94c5-09281b11cda1	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"lassejantsch@web.de","user_id":"e0895de4-c1ca-458c-9097-8cb43c5e3321","user_phone":""}}	2024-03-29 08:42:35.907564+00	
00000000-0000-0000-0000-000000000000	d242ca0a-4502-49e0-a9ea-8e7f7bcb7f16	{"action":"login","actor_id":"e0895de4-c1ca-458c-9097-8cb43c5e3321","actor_username":"lassejantsch@web.de","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-30 01:07:43.207854+00	
00000000-0000-0000-0000-000000000000	5546ffcc-dfe5-478b-92b2-d9d91f303cfe	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-30 01:09:02.751872+00	
00000000-0000-0000-0000-000000000000	b12006c0-d6f0-44f6-adad-8b1527a019e3	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-31 01:29:52.177066+00	
00000000-0000-0000-0000-000000000000	3cf239f0-405b-453d-9ada-83d58a6a4d23	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-30 01:26:22.08514+00	
00000000-0000-0000-0000-000000000000	471d80db-9267-46bc-b81b-2475089b48bf	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-30 01:26:25.260838+00	
00000000-0000-0000-0000-000000000000	3c7e97fd-f1bd-4e3a-8957-874da6ed82d4	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 09:33:01.700107+00	
00000000-0000-0000-0000-000000000000	945e7a21-5f73-4604-9288-7fb1b0b07bd5	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 09:33:01.716417+00	
00000000-0000-0000-0000-000000000000	d60c104e-cad0-4b29-b39a-3598965089ec	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 10:55:24.598777+00	
00000000-0000-0000-0000-000000000000	34abac3e-39d7-41b3-9787-d08ce82d8f82	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 10:55:24.600374+00	
00000000-0000-0000-0000-000000000000	152078a6-d64a-49de-ba7f-8b62ae0d7fbe	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"lgs010704@gmail.com","user_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","user_phone":""}}	2024-03-31 11:21:19.798342+00	
00000000-0000-0000-0000-000000000000	e5fbb4f1-137c-443a-a970-288592702b58	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 11:30:25.01287+00	
00000000-0000-0000-0000-000000000000	3bbceef8-5dca-4ec0-a613-d00b086c561e	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 11:30:25.014954+00	
00000000-0000-0000-0000-000000000000	730b3719-120a-42ac-93b9-fb845dda71d9	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 11:30:26.381702+00	
00000000-0000-0000-0000-000000000000	ab58474e-e4a6-4f12-ae55-96aec6f793eb	{"action":"login","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-31 11:30:59.204407+00	
00000000-0000-0000-0000-000000000000	7a58b31c-47bf-49b5-9879-b83e4f666006	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 12:07:02.536878+00	
00000000-0000-0000-0000-000000000000	f17574dc-18f7-4f5a-be67-d7d4ebf60865	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 12:07:02.556416+00	
00000000-0000-0000-0000-000000000000	62ace84f-e891-4ffa-ace9-153819306c59	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 13:05:41.258913+00	
00000000-0000-0000-0000-000000000000	56129bde-b0da-4b3b-a212-f865ea0b3a1a	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-03-31 13:05:41.260482+00	
00000000-0000-0000-0000-000000000000	b35b3997-7404-4e5c-bcbc-df9ec61a634a	{"action":"login","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-31 13:08:20.252144+00	
00000000-0000-0000-0000-000000000000	0e80ffaf-9120-4cea-a734-bad849bc3064	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-03-31 22:54:27.771404+00	
00000000-0000-0000-0000-000000000000	39509ebd-bdcc-4970-aa92-ecc3e75a217e	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-03-31 22:54:27.784202+00	
00000000-0000-0000-0000-000000000000	30cea0cd-50d7-4a0e-a9ee-2130d11ee7d2	{"action":"login","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-31 23:50:29.090714+00	
00000000-0000-0000-0000-000000000000	9b238ec1-8c67-4d61-aef9-013ec8b00127	{"action":"login","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-31 23:50:32.502088+00	
00000000-0000-0000-0000-000000000000	1eb7c983-fbd1-4742-8aa7-a323636b1e26	{"action":"user_repeated_signup","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-03-31 23:50:35.3737+00	
00000000-0000-0000-0000-000000000000	58499dec-ac9f-44f8-958a-4c4c47304d8b	{"action":"user_repeated_signup","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-03-31 23:50:38.494104+00	
00000000-0000-0000-0000-000000000000	57d86e27-53b1-4714-b5d9-4b1544af5b76	{"action":"login","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-31 23:51:06.764465+00	
00000000-0000-0000-0000-000000000000	b3db4f3c-137e-4874-b036-3ef0d8b8ef2b	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 01:38:38.986682+00	
00000000-0000-0000-0000-000000000000	a0b8f231-1ca1-4c8c-87ea-17da75f075bd	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 01:38:38.993932+00	
00000000-0000-0000-0000-000000000000	7f5be583-4149-45db-b4b4-5eca2a5a6c15	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 02:10:11.31016+00	
00000000-0000-0000-0000-000000000000	3c47143f-34b2-46dc-95a1-e28fa7f4ced6	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 02:10:11.31424+00	
00000000-0000-0000-0000-000000000000	9b54166e-920d-4beb-b5bf-9fda32692371	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 05:46:03.837867+00	
00000000-0000-0000-0000-000000000000	a71fb9ab-cef8-4bbf-a398-81034f864b60	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 05:46:03.844606+00	
00000000-0000-0000-0000-000000000000	a0102ecf-edc4-435e-961b-9d8bbb37c582	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 07:17:02.886566+00	
00000000-0000-0000-0000-000000000000	3d217f7a-87d4-409a-a4f9-126ce22231ff	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 07:17:02.896242+00	
00000000-0000-0000-0000-000000000000	4fb3e6b2-0329-4e94-931e-4951c714cb16	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 07:19:55.385571+00	
00000000-0000-0000-0000-000000000000	3c6a1ece-2a1e-4b3f-aef3-f1c6c76d03a2	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 07:19:55.388405+00	
00000000-0000-0000-0000-000000000000	4b70af94-c892-4242-89d5-89faa492544b	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 09:51:51.266424+00	
00000000-0000-0000-0000-000000000000	295c093a-9614-4219-8da1-2d9e65e72ae5	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 09:51:51.267525+00	
00000000-0000-0000-0000-000000000000	79ce9f16-4db1-4606-8687-68653703d4bf	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 10:00:58.267867+00	
00000000-0000-0000-0000-000000000000	66ec2a89-7a36-4283-8fff-59abd2ca9f53	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 10:00:58.268432+00	
00000000-0000-0000-0000-000000000000	682c0629-5419-4b66-87d0-12c32157e2ee	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 11:43:09.702748+00	
00000000-0000-0000-0000-000000000000	4818b009-1de7-413e-bc3c-4be31c4a8259	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 11:43:09.704323+00	
00000000-0000-0000-0000-000000000000	80ebf4b1-0fb6-4a17-8310-0ba2134b30d0	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 12:48:00.876026+00	
00000000-0000-0000-0000-000000000000	0373a5c3-585d-4323-a11b-0f13296e7832	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 12:48:00.880532+00	
00000000-0000-0000-0000-000000000000	c49c9772-a763-4fb1-a186-6ac6f3735f60	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 13:15:53.142608+00	
00000000-0000-0000-0000-000000000000	2dc60826-39be-468b-a5ec-9e3505f7a1c1	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 13:15:53.147104+00	
00000000-0000-0000-0000-000000000000	3add89d3-c16f-46b7-8077-48d151415f62	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-01 13:28:18.240313+00	
00000000-0000-0000-0000-000000000000	1bc2eef1-fd7a-46fc-a323-dd9f86fd218b	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-01 13:29:52.737406+00	
00000000-0000-0000-0000-000000000000	b951912b-b3b4-4658-81f6-e62eba8e10b8	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 23:14:01.117491+00	
00000000-0000-0000-0000-000000000000	8ef9f98f-e305-438c-ae73-f67b49ffa681	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-01 23:14:01.127664+00	
00000000-0000-0000-0000-000000000000	3e0b3fc3-aa39-40db-bd85-83d90a46fb78	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-02 00:02:17.592634+00	
00000000-0000-0000-0000-000000000000	6ed90b36-6832-47cb-aefc-47f75fabcaed	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-02 00:02:17.594926+00	
00000000-0000-0000-0000-000000000000	c8fe3fb7-ac17-41f9-ae83-d34583cb5447	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-02 02:09:31.436443+00	
00000000-0000-0000-0000-000000000000	542d1c57-e756-4273-977e-50948ceb5a3b	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-02 02:09:31.442095+00	
00000000-0000-0000-0000-000000000000	27177f73-39b5-4552-a200-7c42ed6f9c9d	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-02 02:29:27.167672+00	
00000000-0000-0000-0000-000000000000	416a8062-4dbc-4f26-9068-7ba336fe14c6	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-02 02:29:27.17084+00	
00000000-0000-0000-0000-000000000000	f14e8a6e-bd8d-4407-83e7-67fcf3d97d98	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 03:52:51.465049+00	
00000000-0000-0000-0000-000000000000	ebe6b684-a4ee-4221-bf8f-685cefcfb83b	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-02 04:30:06.270823+00	
00000000-0000-0000-0000-000000000000	07c14170-0369-43d7-8285-fcefe4760744	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-02 04:30:06.272209+00	
00000000-0000-0000-0000-000000000000	81189d39-8b7f-479f-9350-d9d4622d83d5	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 04:31:13.200058+00	
00000000-0000-0000-0000-000000000000	83a24114-a10b-4fa5-add8-a9ec5c519b75	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 04:44:43.392002+00	
00000000-0000-0000-0000-000000000000	bde605e7-028c-4a15-8016-81da79048168	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 04:49:54.650535+00	
00000000-0000-0000-0000-000000000000	0d69d5a8-d2ca-4324-9147-55c74d7ef1e4	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 04:49:58.704233+00	
00000000-0000-0000-0000-000000000000	596840e3-d38b-404c-b163-86f75788e888	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 04:51:08.237355+00	
00000000-0000-0000-0000-000000000000	405b6b36-cf53-4bfb-a99f-26f94f67e012	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 04:51:13.578619+00	
00000000-0000-0000-0000-000000000000	8d7247de-5d9b-4943-a5d6-f69b7e846603	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 04:56:29.045789+00	
00000000-0000-0000-0000-000000000000	9f62f79d-7cf7-4a10-99a8-b3322606ab4f	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 04:56:38.44686+00	
00000000-0000-0000-0000-000000000000	69a2dd45-e69d-4214-9858-bf81bedb44b0	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 04:56:56.740534+00	
00000000-0000-0000-0000-000000000000	a0388ea7-258b-438d-9eec-6a35a43a9a81	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 04:59:14.05483+00	
00000000-0000-0000-0000-000000000000	11879116-b8b9-4cf0-a0a5-8b336c4033eb	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 04:59:17.734995+00	
00000000-0000-0000-0000-000000000000	0edd1367-43e3-4a63-a01e-362263b267ef	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:00:00.827645+00	
00000000-0000-0000-0000-000000000000	9dd8e516-ea0f-49b6-b78a-c40b1ee5a848	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 05:00:06.444428+00	
00000000-0000-0000-0000-000000000000	e32bd6c9-33dd-4a1b-a65e-9a1507eabd06	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:00:46.507363+00	
00000000-0000-0000-0000-000000000000	2178b67d-fbef-4314-bc8c-dccf502a64f4	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 05:00:55.142459+00	
00000000-0000-0000-0000-000000000000	5bb2b1e2-4923-4b02-af1c-580e87a20797	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:01:35.996279+00	
00000000-0000-0000-0000-000000000000	8e222a55-567a-4b90-8548-591f32adcf4d	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 05:01:39.045482+00	
00000000-0000-0000-0000-000000000000	d0119288-1245-4b04-a808-24e107dc79d4	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:04:24.64986+00	
00000000-0000-0000-0000-000000000000	cfb4f076-936d-4a13-a4a3-ceeaeedbb305	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:05:17.885569+00	
00000000-0000-0000-0000-000000000000	900a0ebc-5e89-4531-bd24-4c7eab4a3f55	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:06:05.488186+00	
00000000-0000-0000-0000-000000000000	cd579b9f-a33b-4721-afb5-e0ebf66874bc	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:15:47.758322+00	
00000000-0000-0000-0000-000000000000	fce7cf4e-c1d8-4dec-a533-22f5b14692f6	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:16:01.690933+00	
00000000-0000-0000-0000-000000000000	b1d51fd5-7bd6-4fd1-8036-25e1381d04fe	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:18:35.309055+00	
00000000-0000-0000-0000-000000000000	84ae1137-e40c-4c58-8627-7d93de36c73d	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 05:18:39.131859+00	
00000000-0000-0000-0000-000000000000	1d282c87-9697-45ec-aacf-266e9c20b387	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:20:30.822104+00	
00000000-0000-0000-0000-000000000000	ecefd903-953d-4914-8ba4-1f9f9d66014e	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 05:21:09.856607+00	
00000000-0000-0000-0000-000000000000	9f099d78-0d22-440a-81a3-6cb6612f72ae	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:22:20.537685+00	
00000000-0000-0000-0000-000000000000	b7a8a8c5-f9d0-4727-8176-ddbc02397529	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 05:22:25.834361+00	
00000000-0000-0000-0000-000000000000	978e36c4-c150-4ac4-ac23-bee0345a1093	{"action":"token_refreshed","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-02 05:28:28.158255+00	
00000000-0000-0000-0000-000000000000	ed8893cd-305a-4751-87dc-28cd6cd03aeb	{"action":"token_revoked","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-02 05:28:28.159681+00	
00000000-0000-0000-0000-000000000000	874be3db-2953-4ca7-8f75-cd80117a17b4	{"action":"logout","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-04-02 05:44:23.423741+00	
00000000-0000-0000-0000-000000000000	551fb8b8-5975-4d4b-b972-88fcfee63ca5	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:47:06.848169+00	
00000000-0000-0000-0000-000000000000	5ec148f1-8ac0-499b-a931-be2fbbc47fff	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 05:48:33.711854+00	
00000000-0000-0000-0000-000000000000	923e3d65-099a-4372-b4db-db1b555e312a	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 05:52:53.670132+00	
00000000-0000-0000-0000-000000000000	9bd5d201-262b-47a2-834c-3c3da3ac1e91	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-02 07:08:56.949981+00	
00000000-0000-0000-0000-000000000000	36603eee-88bb-4b12-9312-e846a6fec410	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-02 07:08:56.96206+00	
00000000-0000-0000-0000-000000000000	13a9445e-2aaa-4ff7-9757-a966f604e927	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"zjl111@knu.ac.kr","user_id":"5917bb7b-c207-4b6c-b2ab-423f555a5dbd","user_phone":""}}	2024-04-02 07:12:01.188128+00	
00000000-0000-0000-0000-000000000000	661b3de8-43fb-4901-aa28-34264b3419d2	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jt2062621@knu.ac.kr","user_id":"bb7fe2a4-d4f0-416c-8891-5e09a0c10388","user_phone":""}}	2024-04-02 07:12:20.254002+00	
00000000-0000-0000-0000-000000000000	86b79f8a-bde9-4ec7-97ff-596a307ba5c1	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:17:32.197121+00	
00000000-0000-0000-0000-000000000000	aaaec710-1282-4428-93df-e7d9aaf875b3	{"action":"login","actor_id":"8f2bf7a3-6a48-445e-a6e3-9453551f9008","actor_username":"lgs010704@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:41:06.222705+00	
00000000-0000-0000-0000-000000000000	d8b93382-dc31-45b3-99ce-9ec1f7f6cb19	{"action":"login","actor_id":"bb7fe2a4-d4f0-416c-8891-5e09a0c10388","actor_username":"jt2062621@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:41:35.53925+00	
00000000-0000-0000-0000-000000000000	965f3ef8-7ed8-4684-a987-5179895a659b	{"action":"login","actor_id":"bb7fe2a4-d4f0-416c-8891-5e09a0c10388","actor_username":"jt2062621@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:41:39.221037+00	
00000000-0000-0000-0000-000000000000	e73522a5-95e7-4fff-9c25-a3157a4c234b	{"action":"login","actor_id":"bb7fe2a4-d4f0-416c-8891-5e09a0c10388","actor_username":"jt2062621@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:41:42.686906+00	
00000000-0000-0000-0000-000000000000	c0970fdb-4ee6-4641-94e4-cbabe1fe3e6f	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:42:27.430295+00	
00000000-0000-0000-0000-000000000000	dde5cab9-2b19-41f5-9f11-f85b9bafebc5	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:42:30.540703+00	
00000000-0000-0000-0000-000000000000	3e1f3c3d-8bcc-410f-9e68-bfadf2ca51cd	{"action":"login","actor_id":"5917bb7b-c207-4b6c-b2ab-423f555a5dbd","actor_username":"zjl111@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:42:37.700651+00	
00000000-0000-0000-0000-000000000000	b8f9a4c8-20be-499c-835c-f5c41e2f5dc2	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-02 07:56:28.497881+00	
00000000-0000-0000-0000-000000000000	0fbe8966-0c98-4226-94f1-bc0076b89d37	{"action":"login","actor_id":"5917bb7b-c207-4b6c-b2ab-423f555a5dbd","actor_username":"zjl111@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 07:57:05.357147+00	
00000000-0000-0000-0000-000000000000	536c7166-1b7c-446a-9bfd-9daf5f7d654e	{"action":"login","actor_id":"5917bb7b-c207-4b6c-b2ab-423f555a5dbd","actor_username":"zjl111@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 08:09:18.6402+00	
00000000-0000-0000-0000-000000000000	a977bd62-a4e9-45eb-b8f4-ba3a7c7b9879	{"action":"token_refreshed","actor_id":"bb7fe2a4-d4f0-416c-8891-5e09a0c10388","actor_username":"jt2062621@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-02 12:12:54.409868+00	
00000000-0000-0000-0000-000000000000	0f585ad7-5b4b-42a1-b7c8-c7a3b921d41b	{"action":"token_revoked","actor_id":"bb7fe2a4-d4f0-416c-8891-5e09a0c10388","actor_username":"jt2062621@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-02 12:12:54.422629+00	
00000000-0000-0000-0000-000000000000	1ea9f7a4-931f-4a5b-a5ac-6c894e980c92	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 22:33:58.959142+00	
00000000-0000-0000-0000-000000000000	d583a81f-5911-49dd-a8fe-02ad7e36df6d	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-02 23:20:56.503128+00	
00000000-0000-0000-0000-000000000000	77edfe05-1dc6-490b-b9a7-d8498bfb827e	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-02 23:57:09.567328+00	
00000000-0000-0000-0000-000000000000	dfc0a52e-c019-482f-bfd1-3ace5a15e044	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-02 23:57:09.5689+00	
00000000-0000-0000-0000-000000000000	186afce7-8629-4311-8230-4a6138f167c7	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-03 01:40:25.415238+00	
00000000-0000-0000-0000-000000000000	37b53271-0cbf-4ca8-9a3e-1a0b362c426b	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-03 01:40:25.416677+00	
00000000-0000-0000-0000-000000000000	f303361e-cf63-47f2-a18e-41720da88d78	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-03 05:46:01.583287+00	
00000000-0000-0000-0000-000000000000	27e46538-e3c7-4477-b034-a5cc6957a291	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-03 05:46:01.593406+00	
00000000-0000-0000-0000-000000000000	f08835ef-2228-4888-9345-44ea3a4b7e91	{"action":"token_refreshed","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-03 07:04:30.662843+00	
00000000-0000-0000-0000-000000000000	8d464f68-db2f-4d6b-89e9-fb3d08a0ce3c	{"action":"token_revoked","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-03 07:04:30.66761+00	
00000000-0000-0000-0000-000000000000	67697081-af92-4fb8-a8f0-0d59097f5127	{"action":"login","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-03 07:43:10.033761+00	
00000000-0000-0000-0000-000000000000	78abb5f4-75a4-410e-8175-e1018278df33	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"wlsdk1095sd@gmail.com","user_id":"eb1ef1fa-a9b9-443f-b5b6-0e69888f953e","user_phone":""}}	2024-04-03 07:45:55.986892+00	
00000000-0000-0000-0000-000000000000	ad0f6bdb-6bac-4093-975d-d8fcfa4aec8c	{"action":"logout","actor_id":"ceef8227-e64c-4437-a8fb-49783a6f989e","actor_username":"lassejantsch@knu.ac.kr","actor_via_sso":false,"log_type":"account"}	2024-04-03 07:52:13.396203+00	
00000000-0000-0000-0000-000000000000	c0e23c3c-44b4-4832-bdbd-3bd2484afba3	{"action":"login","actor_id":"eb1ef1fa-a9b9-443f-b5b6-0e69888f953e","actor_username":"wlsdk1095sd@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-04-03 07:52:22.414304+00	
00000000-0000-0000-0000-000000000000	8a074257-bb47-4c9f-9117-a0919692a766	{"action":"token_refreshed","actor_id":"eb1ef1fa-a9b9-443f-b5b6-0e69888f953e","actor_username":"wlsdk1095sd@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-04 00:34:55.902578+00	
00000000-0000-0000-0000-000000000000	f8c32440-f289-455b-b4ce-9b28b75bd5ce	{"action":"token_revoked","actor_id":"eb1ef1fa-a9b9-443f-b5b6-0e69888f953e","actor_username":"wlsdk1095sd@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-04 00:34:55.914282+00	
00000000-0000-0000-0000-000000000000	c1c102fb-9fac-4881-97fc-e4cb04b5a749	{"action":"token_refreshed","actor_id":"eb1ef1fa-a9b9-443f-b5b6-0e69888f953e","actor_username":"wlsdk1095sd@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-04 02:23:47.83003+00	
00000000-0000-0000-0000-000000000000	2aed94d4-fb28-46ca-9846-63c55dbd96c1	{"action":"token_revoked","actor_id":"eb1ef1fa-a9b9-443f-b5b6-0e69888f953e","actor_username":"wlsdk1095sd@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-04 02:23:47.831562+00	
00000000-0000-0000-0000-000000000000	1d13d1e8-13f7-45a4-8012-cbd2cbc298ec	{"action":"token_refreshed","actor_id":"eb1ef1fa-a9b9-443f-b5b6-0e69888f953e","actor_username":"wlsdk1095sd@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-04 04:25:49.909101+00	
00000000-0000-0000-0000-000000000000	b455166c-457d-4509-86da-3a19d642e39c	{"action":"token_revoked","actor_id":"eb1ef1fa-a9b9-443f-b5b6-0e69888f953e","actor_username":"wlsdk1095sd@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-04-04 04:25:49.91224+00	
00000000-0000-0000-0000-000000000000	c5973e8f-b1c8-4f6b-95f7-1d84f9106d77	{"action":"token_refreshed","actor_id":"5917bb7b-c207-4b6c-b2ab-423f555a5dbd","actor_username":"zjl111@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-11 06:05:35.823038+00	
00000000-0000-0000-0000-000000000000	0666cda3-2805-4dec-8232-3bf9980e5db6	{"action":"token_revoked","actor_id":"5917bb7b-c207-4b6c-b2ab-423f555a5dbd","actor_username":"zjl111@knu.ac.kr","actor_via_sso":false,"log_type":"token"}	2024-04-11 06:05:35.834429+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
e3fc4daf-e2e5-4aa8-a369-aa8b87310a17	ceef8227-e64c-4437-a8fb-49783a6f989e	747790af-3d4f-4ab8-947d-eeac883242df	s256	H551RtZLJO6RhiJZyaTR2OPNb4s7qUiJMut8xZ_BSxE	email			2024-03-28 07:26:46.181716+00	2024-03-28 07:26:46.181716+00	email/signup	\N
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
ceef8227-e64c-4437-a8fb-49783a6f989e	ceef8227-e64c-4437-a8fb-49783a6f989e	{"sub": "ceef8227-e64c-4437-a8fb-49783a6f989e", "email": "lassejantsch@knu.ac.kr", "email_verified": false, "phone_verified": false}	email	2024-03-28 07:26:46.17694+00	2024-03-28 07:26:46.176986+00	2024-03-28 07:26:46.176986+00	bd982c61-6e0c-472a-aa9c-33aaf43868f0
e0895de4-c1ca-458c-9097-8cb43c5e3321	e0895de4-c1ca-458c-9097-8cb43c5e3321	{"sub": "e0895de4-c1ca-458c-9097-8cb43c5e3321", "email": "lassejantsch@web.de", "email_verified": false, "phone_verified": false}	email	2024-03-29 08:42:35.905269+00	2024-03-29 08:42:35.905333+00	2024-03-29 08:42:35.905333+00	e790b1f8-845a-4e5d-9c37-1c0e59cdae2a
8f2bf7a3-6a48-445e-a6e3-9453551f9008	8f2bf7a3-6a48-445e-a6e3-9453551f9008	{"sub": "8f2bf7a3-6a48-445e-a6e3-9453551f9008", "email": "lgs010704@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-03-31 11:21:19.795673+00	2024-03-31 11:21:19.79573+00	2024-03-31 11:21:19.79573+00	a120c675-a122-44e0-bbb2-c9e27f11f190
5917bb7b-c207-4b6c-b2ab-423f555a5dbd	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	{"sub": "5917bb7b-c207-4b6c-b2ab-423f555a5dbd", "email": "zjl111@knu.ac.kr", "email_verified": false, "phone_verified": false}	email	2024-04-02 07:12:01.186358+00	2024-04-02 07:12:01.186421+00	2024-04-02 07:12:01.186421+00	bf5a44e9-30df-42be-8775-59f8bd076849
bb7fe2a4-d4f0-416c-8891-5e09a0c10388	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	{"sub": "bb7fe2a4-d4f0-416c-8891-5e09a0c10388", "email": "jt2062621@knu.ac.kr", "email_verified": false, "phone_verified": false}	email	2024-04-02 07:12:20.252941+00	2024-04-02 07:12:20.25299+00	2024-04-02 07:12:20.25299+00	409e5aab-c260-4f37-935d-c47a126058f8
eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	{"sub": "eb1ef1fa-a9b9-443f-b5b6-0e69888f953e", "email": "wlsdk1095sd@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-04-03 07:45:55.982865+00	2024-04-03 07:45:55.982934+00	2024-04-03 07:45:55.982934+00	69536360-7159-4814-a142-698abfed5338
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
75568b6f-c5e0-4601-9eb4-82e26d72d441	2024-03-30 01:07:43.289055+00	2024-03-30 01:07:43.289055+00	password	a818862d-5672-4ad6-b480-566e297af922
b11013bb-a6c6-4abf-830f-f32f1bb25ae1	2024-04-02 07:41:06.23195+00	2024-04-02 07:41:06.23195+00	password	31adf77a-f9b1-43b9-a02a-213945be7f66
8ed0f909-d9ea-4bd3-a586-1981d817ff04	2024-04-02 07:41:35.544641+00	2024-04-02 07:41:35.544641+00	password	b2ab1dff-c83a-4959-b908-596de6d9a963
119e95d1-1b70-445f-82d3-ffab84d7eec9	2024-04-02 07:41:39.223785+00	2024-04-02 07:41:39.223785+00	password	63a5c559-33ff-45a4-b474-6e241c142221
438fc88b-fb41-4955-81af-52317cd8c52e	2024-04-02 07:41:42.690154+00	2024-04-02 07:41:42.690154+00	password	a40f8208-c924-4c03-b443-c145d6ac8d6f
850a9f56-f413-4b05-8185-b221c353f978	2024-04-02 07:42:37.704693+00	2024-04-02 07:42:37.704693+00	password	ccaa00ea-aa9d-4279-810c-60cd096b5e10
d7113dd4-47da-40e5-9f69-d37e774b4f53	2024-04-02 07:57:05.364092+00	2024-04-02 07:57:05.364092+00	password	ec1da740-4568-4b8f-b13b-8371c6a8563f
db3cb618-e3ce-448e-9355-f1429953b0f7	2024-04-02 08:09:18.650429+00	2024-04-02 08:09:18.650429+00	password	9486519d-758c-4427-bab7-c9b735b91388
bd8d0ddf-ca97-4df4-9d45-f26ab05ff252	2024-04-03 07:52:22.427534+00	2024-04-03 07:52:22.427534+00	password	5bd1f327-0db9-4c65-87eb-447cade1436e
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	97	CClthOu_pYzQefG92GQekQ	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	t	2024-04-04 00:34:55.93383+00	2024-04-04 02:23:47.832046+00	eRyeEFZEZ5yDgLFnYGn8OQ	bd8d0ddf-ca97-4df4-9d45-f26ab05ff252
00000000-0000-0000-0000-000000000000	98	BQsyKRQTsfPorbBc8m5Faw	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	t	2024-04-04 02:23:47.833231+00	2024-04-04 04:25:49.913058+00	CClthOu_pYzQefG92GQekQ	bd8d0ddf-ca97-4df4-9d45-f26ab05ff252
00000000-0000-0000-0000-000000000000	99	pjteEVM8EhOqvigHaCFC-A	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	f	2024-04-04 04:25:49.917602+00	2024-04-04 04:25:49.917602+00	BQsyKRQTsfPorbBc8m5Faw	bd8d0ddf-ca97-4df4-9d45-f26ab05ff252
00000000-0000-0000-0000-000000000000	79	cKEkOMSQRSXvZVJDgdnobg	8f2bf7a3-6a48-445e-a6e3-9453551f9008	f	2024-04-02 07:41:06.226956+00	2024-04-02 07:41:06.226956+00	\N	b11013bb-a6c6-4abf-830f-f32f1bb25ae1
00000000-0000-0000-0000-000000000000	85	O0dfftz8qFODhTKjmnliAA	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	f	2024-04-02 07:42:37.703548+00	2024-04-02 07:42:37.703548+00	\N	850a9f56-f413-4b05-8185-b221c353f978
00000000-0000-0000-0000-000000000000	86	9hhiaG5TBmsY-WTxO37gzg	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	f	2024-04-02 07:57:05.359009+00	2024-04-02 07:57:05.359009+00	\N	d7113dd4-47da-40e5-9f69-d37e774b4f53
00000000-0000-0000-0000-000000000000	88	Z9g50Btbn77K7gChcTgevA	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	f	2024-04-02 12:12:54.446758+00	2024-04-02 12:12:54.446758+00	spc63FZj6qKofTdZmP_Pvg	438fc88b-fb41-4955-81af-52317cd8c52e
00000000-0000-0000-0000-000000000000	23	r7AVUK1jBuSzohxHIXhsjw	e0895de4-c1ca-458c-9097-8cb43c5e3321	f	2024-03-30 01:07:43.258532+00	2024-03-30 01:07:43.258532+00	\N	75568b6f-c5e0-4601-9eb4-82e26d72d441
00000000-0000-0000-0000-000000000000	96	eRyeEFZEZ5yDgLFnYGn8OQ	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	t	2024-04-03 07:52:22.421459+00	2024-04-04 00:34:55.916398+00	\N	bd8d0ddf-ca97-4df4-9d45-f26ab05ff252
00000000-0000-0000-0000-000000000000	87	jZsmUy2h2vJ0HnQZQqHx6A	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	t	2024-04-02 08:09:18.646355+00	2024-04-11 06:05:35.835292+00	\N	db3cb618-e3ce-448e-9355-f1429953b0f7
00000000-0000-0000-0000-000000000000	100	F9rye8W7v-c6uJykeehyZA	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	f	2024-04-11 06:05:35.846782+00	2024-04-11 06:05:35.846782+00	jZsmUy2h2vJ0HnQZQqHx6A	db3cb618-e3ce-448e-9355-f1429953b0f7
00000000-0000-0000-0000-000000000000	80	PrOcnyuKrDdx515tjs_S6A	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	f	2024-04-02 07:41:35.543295+00	2024-04-02 07:41:35.543295+00	\N	8ed0f909-d9ea-4bd3-a586-1981d817ff04
00000000-0000-0000-0000-000000000000	81	19QbkNsZVHcAqdZW1kJM-A	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	f	2024-04-02 07:41:39.222706+00	2024-04-02 07:41:39.222706+00	\N	119e95d1-1b70-445f-82d3-ffab84d7eec9
00000000-0000-0000-0000-000000000000	82	spc63FZj6qKofTdZmP_Pvg	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	t	2024-04-02 07:41:42.68869+00	2024-04-02 12:12:54.42324+00	\N	438fc88b-fb41-4955-81af-52317cd8c52e
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
bd8d0ddf-ca97-4df4-9d45-f26ab05ff252	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	2024-04-03 07:52:22.417166+00	2024-04-04 04:25:49.927954+00	\N	aal1	\N	2024-04-04 04:25:49.927875	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36	155.230.34.160	\N
db3cb618-e3ce-448e-9355-f1429953b0f7	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	2024-04-02 08:09:18.643398+00	2024-04-11 06:05:35.8662+00	\N	aal1	\N	2024-04-11 06:05:35.863133	Vercel Edge Functions	2a06:98c0:3600::103	\N
850a9f56-f413-4b05-8185-b221c353f978	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	2024-04-02 07:42:37.702886+00	2024-04-02 07:42:37.702886+00	\N	aal1	\N	\N	node	54.165.238.224	\N
d7113dd4-47da-40e5-9f69-d37e774b4f53	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	2024-04-02 07:57:05.357805+00	2024-04-02 07:57:05.357805+00	\N	aal1	\N	\N	node	3.235.182.77	\N
438fc88b-fb41-4955-81af-52317cd8c52e	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	2024-04-02 07:41:42.68813+00	2024-04-02 12:12:54.461955+00	\N	aal1	\N	2024-04-02 12:12:54.461883	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36	1.209.19.93	\N
75568b6f-c5e0-4601-9eb4-82e26d72d441	e0895de4-c1ca-458c-9097-8cb43c5e3321	2024-03-30 01:07:43.220468+00	2024-03-30 01:07:43.220468+00	\N	aal1	\N	\N	node	44.213.66.101	\N
b11013bb-a6c6-4abf-830f-f32f1bb25ae1	8f2bf7a3-6a48-445e-a6e3-9453551f9008	2024-04-02 07:41:06.225348+00	2024-04-02 07:41:06.225348+00	\N	aal1	\N	\N	node	52.23.194.85	\N
8ed0f909-d9ea-4bd3-a586-1981d817ff04	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	2024-04-02 07:41:35.54269+00	2024-04-02 07:41:35.54269+00	\N	aal1	\N	\N	node	3.235.182.77	\N
119e95d1-1b70-445f-82d3-ffab84d7eec9	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	2024-04-02 07:41:39.222144+00	2024-04-02 07:41:39.222144+00	\N	aal1	\N	\N	node	3.237.23.101	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	8f2bf7a3-6a48-445e-a6e3-9453551f9008	authenticated	authenticated	lgs010704@gmail.com	$2a$10$dxWLEbTxvJVKGFumhg8JZeN5lPXVNCFdURuuuqpbbLM2hwldG27Su	2024-03-31 11:21:19.802657+00	\N		\N		\N			\N	2024-04-02 07:41:06.225277+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-03-31 11:21:19.75071+00	2024-04-02 07:41:06.231083+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	e0895de4-c1ca-458c-9097-8cb43c5e3321	authenticated	authenticated	lassejantsch@web.de	$2a$10$RNB5IaYb.r6r0jlASLjireEF8YhHkwqSPuhDcYADaUlCZRRnxmKwu	2024-03-29 08:42:35.911825+00	\N		\N		\N			\N	2024-03-30 01:07:43.220389+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-03-29 08:42:35.89441+00	2024-03-30 01:07:43.284018+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	ceef8227-e64c-4437-a8fb-49783a6f989e	authenticated	authenticated	lassejantsch@knu.ac.kr	$2a$10$qsmOoKj5A0aGD4Zy2xhbAeBpZEzbSu3mnM3gXb3VOw79UvcVQni2e	2024-03-28 07:27:36.152531+00	\N		2024-03-28 07:26:46.183266+00		\N			\N	2024-04-03 07:43:10.035559+00	{"provider": "email", "providers": ["email"]}	{"sub": "ceef8227-e64c-4437-a8fb-49783a6f989e", "email": "lassejantsch@knu.ac.kr", "email_verified": false, "phone_verified": false}	\N	2024-03-28 07:26:46.165321+00	2024-04-03 07:43:10.045187+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	authenticated	authenticated	jt2062621@knu.ac.kr	$2a$10$pGONRtQXOhYDN3X6JPDcFO4ClXBHXAjvWpSNszqIa/x2yynBXv5sC	2024-04-02 07:12:20.255404+00	\N		\N		\N			\N	2024-04-02 07:41:42.68806+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-04-02 07:12:20.251182+00	2024-04-02 12:12:54.455089+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	authenticated	authenticated	wlsdk1095sd@gmail.com	$2a$10$iursDZr.6iueZJYe1rSkqu/rt05nwDzv99UiuKKs5km5rFq9gGKk6	2024-04-03 07:45:55.991953+00	\N		\N		\N			\N	2024-04-03 07:52:22.417085+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-04-03 07:45:55.936007+00	2024-04-04 04:25:49.922353+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	authenticated	authenticated	zjl111@knu.ac.kr	$2a$10$SXWgPETlr/9HPMD2VsteEewt86UeIbR/Eb9QIsiQUNDvpoAa6CDIy	2024-04-02 07:12:01.191511+00	\N		\N		\N			\N	2024-04-02 08:09:18.643325+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-04-02 07:12:01.149042+00	2024-04-11 06:05:35.856053+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: annotations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.annotations (id, created_at, user_id, ref_id, status, comment, updated_at, annotation_location, guideline_version) FROM stdin;
c922935c-963b-4db3-aec0-180f73add60a	2024-04-02 07:10:57.849624+00	ceef8227-e64c-4437-a8fb-49783a6f989e	51d7d82a-5ea4-47cb-a54e-9da795374fae	annotated		2024-04-02 07:50:47.586959+00	{8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}	1.0
4a629698-36d5-4f02-9263-bc48b0346493	2024-04-02 07:10:57.853509+00	8f2bf7a3-6a48-445e-a6e3-9453551f9008	db9ebbf7-025c-4f09-ac7b-86e6398b4164	annotated		2024-04-02 07:51:09.140398+00	{38,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14}	1.0
02781441-8951-493b-8f0e-e61f697e5885	2024-04-02 07:10:57.856741+00	8f2bf7a3-6a48-445e-a6e3-9453551f9008	454aa6ef-49ce-4ded-871a-6f36442842fa	annotated		2024-04-02 07:51:37.233847+00	{39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54}	1.0
0769c1a9-da21-4812-b74e-395885534a0b	2024-04-02 07:10:57.860072+00	ceef8227-e64c-4437-a8fb-49783a6f989e	c95c6d3b-41e9-499e-a26c-0f1b28cdbd0b	annotated		2024-04-02 07:52:03.295611+00	{69,70,71,72,73,74,75,76,77,78,79,80}	1.0
a20b4cbf-c5d8-4360-af49-fadab3e2e8ec	2024-04-02 07:10:57.87027+00	ceef8227-e64c-4437-a8fb-49783a6f989e	ff689f47-f5b8-4c4f-9a4a-fe4450507da0	annotated		2024-04-02 07:52:19.675033+00	{34,35,36,37,38,39,43,44,45,46,47,48,49,50,51,52}	1.0
43867874-d45e-45b9-8f7a-5ca298a2cb09	2024-04-02 07:10:57.873521+00	ceef8227-e64c-4437-a8fb-49783a6f989e	a6b5b0c1-0bc7-4254-8bbd-ef69ff85799a	annotated		2024-04-02 07:53:09.682579+00	{0,1,2,3,4,5,7,8,9,10,11,12,13,14,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66}	1.0
e303d0f6-1876-4b67-aaf0-ef27d9f47876	2024-04-02 07:10:57.863539+00	8f2bf7a3-6a48-445e-a6e3-9453551f9008	6d87d67d-f2df-4de8-a05c-18c73d25da2f	annotated		2024-04-02 07:53:24.091868+00	{69,70,71,72,73,74,75,76,77,78,83,84}	1.0
da411815-3177-4fc6-910c-7253797e60d6	2024-04-02 07:10:57.846548+00	ceef8227-e64c-4437-a8fb-49783a6f989e	ea160904-2e05-40d0-8c9a-dbcdda083d70	annotated		2024-04-02 22:34:43.248876+00	{3,4,5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}	1.0
2d5613ef-1c25-405d-9792-88252f5a731c	2024-04-02 07:10:57.866839+00	8f2bf7a3-6a48-445e-a6e3-9453551f9008	889c4782-4f33-4491-b40e-eebd50f68f4a	annotated		2024-04-02 07:54:02.098246+00	{0,1,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32}	1.0
95f9b954-02f8-46d4-9a2c-f15b6cef0030	2024-04-02 07:13:08.238487+00	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	454aa6ef-49ce-4ded-871a-6f36442842fa	annotated		2024-04-02 07:55:11.173076+00	{20,21,22,23,24,25,26,27,28,29,30,11,12,13,14,15,16,17,18,19,40,44,45,46,47,48,49,50,51,52,53,54}	1.0
7c50392c-1b6b-4391-add5-aeca779ed999	2024-04-02 07:10:57.876712+00	8f2bf7a3-6a48-445e-a6e3-9453551f9008	215182c0-f37d-44cd-badf-b143434aeb75	annotated		2024-04-02 07:55:32.695089+00	{0,1,2,3,4,5,6,7,8,9,10,16,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,72,73}	1.0
14bf1fdb-4202-49c9-a5a8-f6ff3037898b	2024-04-02 07:13:08.241048+00	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	c95c6d3b-41e9-499e-a26c-0f1b28cdbd0b	annotated		2024-04-02 07:57:24.995147+00	{69,70,71,72,73,74,75,76,77,78,79,80,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68}	1.0
d962ea2e-eb8b-487f-9f5d-dea188db311f	2024-04-02 07:13:08.244689+00	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	6d87d67d-f2df-4de8-a05c-18c73d25da2f	annotated		2024-04-02 08:21:22.105459+00	{83,84,88,89,90,86,87,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45}	1.0
0e379e7c-6c8d-48bd-898d-8e793c3ec894	2024-04-02 07:13:08.252929+00	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	a6b5b0c1-0bc7-4254-8bbd-ef69ff85799a	annotated		2024-04-02 07:59:33.920798+00	{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66}	1.0
0684869f-78ee-4b1c-bda6-db6418f64a40	2024-04-02 07:13:08.22854+00	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	ea160904-2e05-40d0-8c9a-dbcdda083d70	annotated		2024-04-02 08:06:16.034395+00	{22,23,24,25,26,27,28,29,30,8,9}	1.0
77933655-7e5f-4df8-9e1b-0a9c78ed4623	2024-04-02 07:13:08.255671+00	bb7fe2a4-d4f0-416c-8891-5e09a0c10388	215182c0-f37d-44cd-badf-b143434aeb75	annotated		2024-04-02 08:00:08.622455+00	{0,1,2,3,4,5,6,7,8,9,10,11,16,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,72,73}	1.0
8c59a972-025b-485e-a642-594827a208c2	2024-04-02 07:13:08.247495+00	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	889c4782-4f33-4491-b40e-eebd50f68f4a	annotated		2024-04-02 08:07:28.957822+00	{51,52}	1.0
f0607527-93d1-4000-bbf6-af52e9024e0f	2024-04-02 07:13:08.235544+00	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	db9ebbf7-025c-4f09-ac7b-86e6398b4164	annotated		2024-04-02 08:06:36.699879+00	{49,50,51,52,53,54,55}	1.0
365b9512-40ff-45fe-9792-dea5cb10d3b7	2024-04-02 07:13:08.250242+00	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	ff689f47-f5b8-4c4f-9a4a-fe4450507da0	annotated		2024-04-02 08:08:13.422704+00	{23,24,25,26,27,28,29,30,31,32}	1.0
41c8f768-de5e-4691-b73b-2089fec2054b	2024-04-02 07:13:08.231542+00	5917bb7b-c207-4b6c-b2ab-423f555a5dbd	51d7d82a-5ea4-47cb-a54e-9da795374fae	annotated		2024-04-02 08:14:26.172456+00	{53,54,20,21,22,23,24,25,26,27,28,29,30}	1.0
e5307df6-6715-4200-a855-aa4df7dffd56	2024-04-03 07:48:12.291466+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	454aa6ef-49ce-4ded-871a-6f36442842fa	annotated		2024-04-03 08:22:34.521493+00	{44,45,46,47,48,49,50,51,52,53,54,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37}	1.0
7f356487-e017-4143-bc74-34c30e949b4c	2024-04-03 07:48:12.298431+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	889c4782-4f33-4491-b40e-eebd50f68f4a	annotated		2024-04-03 08:38:30.503545+00	{18,19,20,21,22,23,24,25,26,27,28,29,30,31,32}	1.0
f299d8b4-10fe-47be-b298-de71eb73da13	2024-04-03 07:48:12.300905+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	ff689f47-f5b8-4c4f-9a4a-fe4450507da0	skipped	d	2024-04-03 08:41:09.551187+00	\N	1.0
6633a026-2bb5-42b6-ac86-03e469345bb7	2024-04-03 07:48:12.274721+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	ea160904-2e05-40d0-8c9a-dbcdda083d70	annotated		2024-04-03 08:07:29.215287+00	{3,4,5,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}	1.0
83bec8bf-ff5e-4508-a31a-de97befdae0f	2024-04-03 07:48:12.288812+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	db9ebbf7-025c-4f09-ac7b-86e6398b4164	annotated		2024-04-03 08:21:42.223256+00	{11,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,44,45,46,47,48,49,50,51,52,53,54}	1.0
f45c9088-dd98-44ac-b3a6-37031afb1c5f	2024-04-03 07:48:12.296191+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	6d87d67d-f2df-4de8-a05c-18c73d25da2f	annotated		2024-04-03 08:28:53.012323+00	{83,84,69,70,71,72,73,74,75,76,77,78,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103}	1.0
90e7ff75-a4fc-4fd4-972c-ffbb13e23ec1	2024-04-03 07:48:12.293887+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	c95c6d3b-41e9-499e-a26c-0f1b28cdbd0b	annotated		2024-04-03 08:29:10.825914+00	{69,70,71,72,73,74,75,76,77,78,79,80,46,47,48,49,50,51,52,53,54,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103}	1.0
a5c4ac4a-f3f9-47d4-b58b-66d6246ab336	2024-04-03 07:48:12.281977+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	51d7d82a-5ea4-47cb-a54e-9da795374fae	annotated		2024-04-03 08:40:41.956783+00	{8,9,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,44,45,46,47,48,49,50,51,52,53,54}	1.0
f37dbb17-5434-45a4-b092-01f0f5e09717	2024-04-03 07:48:12.303823+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	a6b5b0c1-0bc7-4254-8bbd-ef69ff85799a	skipped	d	2024-04-03 08:41:18.739553+00	\N	1.0
472b0fa4-25b8-44ca-a223-5da31bc3a514	2024-04-03 07:48:12.306164+00	eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	215182c0-f37d-44cd-badf-b143434aeb75	skipped	d	2024-04-03 08:41:27.887529+00	\N	1.0
\.


--
-- Data for Name: documents; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.documents (id, created_at, title, pub_year, abstract, doi, authors) FROM stdin;
0e70d6b6-c324-4354-aa7b-574b8b280d43	2024-03-28 13:26:16.501662+00	Attention Is All You Need	2017	The dominant sequence transduction models are based on complex recurrent or convolutional neural networks in an encoder-decoder configuration. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data.	https://doi.org/10.48550/arXiv.1706.03762	Ashish Vaswani; Noam Shazeer;  Niki Parmar; Jakob Uszkoreit; Llion Jones; Aidan N. Gomez; Lukasz Kaiser; Illia Polosukhin
\.


--
-- Data for Name: paragraphs; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.paragraphs (created_at, doc_id, text, id) FROM stdin;
2024-03-28 14:02:26.032697+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	End-to-end;memory;networks;are;based;on;a;recurrent;attention;mechanism;instead;of;sequence-;aligned;recurrence;and;have;been;shown;to;perform;well;on;simple-language;question;answering;and;language;modeling;tasks;[REF].	61598555-ede3-4610-9858-8307de442503
2024-03-28 14:02:26.03482+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	To;the;best;of;our;knowledge,;however,;the;Transformer;is;the;first;transduction;model;relying;entirely;on;self-attention;to;compute;representations;of;its;input;and;output;without;using;sequence-;aligned;RNNs;or;convolution.;In;the;following;sections,;we;will;describe;the;Transformer,;motivate;self-attention;and;discuss;its;advantages;over;models;such;as;[GREF];and;[REF].	dbaa424d-91a5-4cc2-a391-2237092bcb2a
2024-03-28 14:02:26.03689+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Most;competitive;neural;sequence;transduction;models;have;an;encoder-decoder;structure;[GREF].;Here,;the;encoder;maps;an;input;sequence;of;symbol;representations;(x1,...,xn);to;a;sequence;of;continuous;representations;z;=;(z1,...,zn).;Given;z,;the;decoder;then;generates;an;output;sequence;(y1,;...,;ym);of;symbols;one;element;at;a;time.;At;each;step;the;model;is;auto-regressive;[REF],;consuming;the;previously;generated;symbols;as;additional;input;when;generating;the;next.	026ecd91-e739-4976-8c53-9137f3b3019f
2024-03-28 14:02:26.039043+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Encoder:;The;encoder;is;composed;of;a;stack;of;N;=;6;identical;layers.;Each;layer;has;two;sub-layers.;The;first;is;a;multi-head;self-attention;mechanism,;and;the;second;is;a;simple,;position-;wise;fully;connected;feed-forward;network.;We;employ;a;residual;connection;[REF];around;each;of;the;two;sub-layers,;followed;by;layer;normalization;[REF].;That;is,;the;output;of;each;sub-layer;is;LayerNorm(x;+;Sublayer(x)),;where;Sublayer(x);is;the;function;implemented;by;the;sub-layer;itself.;To;facilitate;these;residual;connections,;all;sub-layers;in;the;model,;as;well;as;the;embedding;layers,;produce;outputs;of;dimension;dmodel;=;512.	3b62b4d0-769f-4f2c-b62c-c0abd898ee0c
2024-03-28 14:02:26.041714+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	The;two;most;commonly;used;attention;functions;are;additive;attention;[REF],;and;dot-product;(multi-	2f1cec49-b00a-44ff-9a1f-f98aed635b83
2024-03-28 14:02:26.044327+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	While;for;small;values;of;dk;the;two;mechanisms;perform;similarly,;additive;attention;outperforms;dot;product;attention;without;scaling;for;larger;values;of;dk;[REF].;We;suspect;that;for;large;values;of;dk,;the;dot;products;grow;large;in;magnitude,;pushing;the;softmax;function;into;regions;where;it;has;extremely;small;gradients;4.;To;counteract;this;effect,;we;scale;the;dot;products;by;√1;.	d2588eee-5743-4908-b1e2-492ca04394a1
2024-03-28 14:02:26.046772+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	•;In;"encoder-decoder;attention";layers,;the;queries;come;from;the;previous;decoder;layer,;and;the;memory;keys;and;values;come;from;the;output;of;the;encoder.;This;allows;every;position;in;the;decoder;to;attend;over;all;positions;in;the;input;sequence.;This;mimics;the;typical;encoder-decoder;attention;mechanisms;in;sequence-to-sequence;models;such;as;[GREF].	743dbfd2-6015-4486-8663-3f18d399e9e4
2024-03-28 14:02:26.049219+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	linear;transformation,;similar;to;[REF].;In;the;embedding;layers,;we;multiply;those;weights;by;5	fb7b28d3-5a84-4fd0-b66a-354248dc6f4c
2024-03-28 14:02:26.051634+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Since;our;model;contains;no;recurrence;and;no;convolution,;in;order;for;the;model;to;make;use;of;the;order;of;the;sequence,;we;must;inject;some;information;about;the;relative;or;absolute;position;of;the;tokens;in;the;sequence.;To;this;end,;we;add;"positional;encodings";to;the;input;embeddings;at;the;bottoms;of;the;encoder;and;decoder;stacks.;The;positional;encodings;have;the;same;dimension;dmodel;as;the;embeddings,;so;that;the;two;can;be;summed.;There;are;many;choices;of;positional;encodings,;learned;and;fixed;[REF].	d6faad0a-6f14-4924-b92a-8690c306c290
2024-03-28 14:02:26.053946+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	We;also;experimented;with;using;learned;positional;embeddings;[REF];instead,;and;found;that;the;two;versions;produced;nearly;identical;results;(see;Table;3;row;(E)).;We;chose;the;sinusoidal;version;because;it;may;allow;the;model;to;extrapolate;to;sequence;lengths;longer;than;the;ones;encountered;during;training.	4cd50666-2aa8-41da-bc01-b94743e7288d
2024-03-28 14:02:26.056006+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	The;third;is;the;path;length;between;long-range;dependencies;in;the;network.;Learning;long-range;dependencies;is;a;key;challenge;in;many;sequence;transduction;tasks.;One;key;factor;affecting;the;ability;to;learn;such;dependencies;is;the;length;of;the;paths;forward;and;backward;signals;have;to;traverse;in;the;network.;The;shorter;these;paths;between;any;combination;of;positions;in;the;input;and;output;sequences,;the;easier;it;is;to;learn;long-range;dependencies;[REF].;Hence;we;also;compare;the;maximum;path;length;between;any;two;input;and;output;positions;in;networks;composed;of;the;different;layer;types.	383cf6c7-d310-4e1d-afad-0b6f858222c5
2024-03-28 14:02:26.058062+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	length;n;is;smaller;than;the;representation;dimensionality;d,;which;is;most;often;the;case;with;sentence;representations;used;by;state-of-the-art;models;in;machine;translations,;such;as;word-piece;[REF];and;byte-pair;[REF];representations.;To;improve;computational;performance;for;tasks;involving;very;long;sequences,;self-attention;could;be;restricted;to;considering;only;a;neighborhood;of;size;r;in;the;input;sequence;centered;around;the;respective;output;position.;This;would;increase;the;maximum;path;length;to;O(n/r).;We;plan;to;investigate;this;approach;further;in;future;work.	c19fde2a-4c48-403c-a604-a4c21898aa85
2024-03-28 14:02:26.060172+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	A;single;convolutional;layer;with;kernel;width;k;<;n;does;not;connect;all;pairs;of;input;and;output;positions.;Doing;so;requires;a;stack;of;O(n/k);convolutional;layers;in;the;case;of;contiguous;kernels,;or;O(logk(n));in;the;case;of;dilated;convolutions;[REF],;increasing;the;length;of;the;longest;paths;between;any;two;positions;in;the;network.;Convolutional;layers;are;generally;more;expensive;than;recurrent;layers,;by;a;factor;of;k.;Separable;convolutions;[REF],;however,;decrease;the;complexity;considerably,;to;O(k;·;n;·;d;+;n;·;d2).;Even;with;k;=;n,;however,;the;complexity;of;a;separable;convolution;is;equal;to;the;combination;of;a;self-attention;layer;and;a;point-wise;feed-forward;layer,;the;approach;we;take;in;our;model.	67548f5b-d322-4cd2-830a-6af26fdf4b0d
2024-03-28 14:02:26.062207+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	We;trained;on;the;standard;WMT;2014;English-German;dataset;consisting;of;about;4.5;million;sentence;pairs.;Sentences;were;encoded;using;byte-pair;encoding;[REF],;which;has;a;shared;source-;target;vocabulary;of;about;37000;tokens.;For;English-French,;we;used;the;significantly;larger;WMT;2014;English-French;dataset;consisting;of;36M;sentences;and;split;tokens;into;a;32000;word-piece;vocabulary;[REF].;Sentence;pairs;were;batched;together;by;approximate;sequence;length.;Each;training;batch;contained;a;set;of;sentence;pairs;containing;approximately;25000;source;tokens;and;25000;target;tokens.	ba65f555-e031-474d-8b65-718aa992595e
2024-03-28 14:02:26.064308+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	We;used;the;Adam;optimizer;[REF];with;β1;=;0.9,;β2;=;0.98;and;ε;=;10−9.;We;varied;the;learning;rate;over;the;course;of;training,;according;to;the;formula:	2cd64327-c06e-4e09-b254-31c5dfc91228
2024-03-28 14:02:26.066756+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	ByteNet;[REF]	0c597223-fb10-4c80-bce1-d5c4bb35c6d9
2024-03-28 14:02:26.069667+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Deep-Att;+;PosUnk;[REF]	7fd3fb92-8cd1-45f6-ae0c-afd4e5d5798c
2024-03-28 14:02:26.073769+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	GNMT;+;RL;[REF]	80bdd6e3-492a-4eea-ab6a-85e0886c9e50
2024-03-28 14:02:26.076335+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	ConvS2S;[REF]	3de92b93-e235-46a8-9b0c-fa9dee94b16e
2024-03-28 14:02:26.078912+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	MoE;[REF]	3ee4c58a-47ac-42cf-8151-052ec2d23c01
2024-03-28 14:02:26.081442+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Deep-Att;+;PosUnk;Ensemble;[REF];GNMT;+;RL;Ensemble;[REF];ConvS2S;Ensemble;[REF];Transformer;(base;model);Transformer;(big)	e042ba51-7e95-418a-a652-b405e79bf85f
2024-03-28 14:02:26.018823+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Recurrent;neural;networks,;long;short-term;memory;[REF];and;gated;recurrent;[REF];neural;networks;in;particular,;have;been;firmly;established;as;state;of;the;art;approaches;in;sequence;modeling;and;transduction;problems;such;as;language;modeling;and;machine;translation;[GREF].;Numerous;efforts;have;since;continued;to;push;the;boundaries;of;recurrent;language;models;and;encoder-decoder;architectures;[GREF].	96553ad5-6bdc-428b-b0ad-8c60d61715fa
2024-03-28 14:02:26.021069+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Recurrent;models;typically;factor;computation;along;the;symbol;positions;of;the;input;and;output;sequences.;Aligning;the;positions;to;steps;in;computation;time,;they;generate;a;sequence;of;hidden;states;ht,;as;a;function;of;the;previous;hidden;state;ht−1;and;the;input;for;position;t.;This;inherently;sequential;nature;precludes;parallelization;within;training;examples,;which;becomes;critical;at;longer;sequence;lengths,;as;memory;constraints;limit;batching;across;examples.;Recent;work;has;achieved;significant;improvements;in;computational;efficiency;through;factorization;tricks;[REF];and;conditional;computation;[REF],;while;also;improving;model;performance;in;case;of;the;latter.;The;fundamental;constraint;of;sequential;computation,;however,;remains.	4e252ada-28f3-48bd-938c-c11a0113fa08
2024-03-28 14:02:26.025356+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Attention;mechanisms;have;become;an;integral;part;of;compelling;sequence;modeling;and;transduc-;tion;models;in;various;tasks,;allowing;modeling;of;dependencies;without;regard;to;their;distance;in;the;input;or;output;sequences;[GREF].;In;all;but;a;few;cases;[REF],;however,;such;attention;mechanisms;are;used;in;conjunction;with;a;recurrent;network.	d0f24150-fa56-459a-8829-6e6d85839f92
2024-03-28 14:02:26.028185+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	The;goal;of;reducing;sequential;computation;also;forms;the;foundation;of;the;Extended;Neural;GPU;[REF],;ByteNet;[REF];and;ConvS2S;[REF],;all;of;which;use;convolutional;neural;networks;as;basic;building;block,;computing;hidden;representations;in;parallel;for;all;input;and;output;positions.;In;these;models,;the;number;of;operations;required;to;relate;signals;from;two;arbitrary;input;or;output;positions;grows;in;the;distance;between;positions,;linearly;for;ConvS2S;and;logarithmically;for;ByteNet.;This;makes;it;more;difficult;to;learn;dependencies;between;distant;positions;[REF].;In;the;Transformer;this;is;reduced;to;a;constant;number;of;operations,;albeit;at;the;cost;of;reduced;effective;resolution;due;to;averaging;attention-weighted;positions,;an;effect;we;counteract;with;Multi-Head;Attention;as;described;in;section;3.2.	7ab3a02a-faa6-4624-b51d-4abd4a1a16a6
2024-03-28 14:02:26.030505+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Self-attention,;sometimes;called;intra-attention;is;an;attention;mechanism;relating;different;positions;of;a;single;sequence;in;order;to;compute;a;representation;of;the;sequence.;Self-attention;has;been;used;successfully;in;a;variety;of;tasks;including;reading;comprehension,;abstractive;summarization,;textual;entailment;and;learning;task-independent;sentence;representations;[GREF].	42559dd8-234a-496f-b155-fecebce46d07
2024-03-28 14:02:26.084776+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Residual;Dropout;We;apply;dropout;[REF];to;the;output;of;each;sub-layer,;before;it;is;added;to;the;sub-layer;input;and;normalized.;In;addition,;we;apply;dropout;to;the;sums;of;the;embeddings;and;the;positional;encodings;in;both;the;encoder;and;decoder;stacks.;For;the;base;model,;we;use;a;rate;of;Pdrop;=;0.1.	bf6c0ae2-948e-4c70-b294-b483464e8eae
2024-03-28 14:02:26.087292+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Label;Smoothing;During;training,;we;employed;label;smoothing;of;value;εls;=;0.1;[REF].;This;hurts;perplexity,;as;the;model;learns;to;be;more;unsure,;but;improves;accuracy;and;BLEU;score.	4d94d1c7-f780-4204-8196-cce44a0e6d7c
2024-03-28 14:02:26.089905+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	For;the;base;models,;we;used;a;single;model;obtained;by;averaging;the;last;5;checkpoints,;which;were;written;at;10-minute;intervals.;For;the;big;models,;we;averaged;the;last;20;checkpoints.;We;used;beam;search;with;a;beam;size;of;4;and;length;penalty;α;=;0.6;[REF].;These;hyperparameters;were;chosen;after;experimentation;on;the;development;set.;We;set;the;maximum;output;length;during;inference;to;input;length;+;50,;but;terminate;early;when;possible;[REF].	f2990e80-bc55-4814-b53b-c9d596a92350
2024-03-28 14:02:26.092422+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	In;Table;3;rows;(B),;we;observe;that;reducing;the;attention;key;size;dk;hurts;model;quality.;This;suggests;that;determining;compatibility;is;not;easy;and;that;a;more;sophisticated;compatibility;function;than;dot;product;may;be;beneficial.;We;further;observe;in;rows;(C);and;(D);that,;as;expected,;bigger;models;are;better,;and;dropout;is;very;helpful;in;avoiding;over-fitting.;In;row;(E);we;replace;our;sinusoidal;positional;encoding;with;learned;positional;embeddings;[REF],;and;observe;nearly;identical;results;to;the;base;model.	ba2c75a5-ec06-4bd3-9aa4-14d53cf3df2f
2024-03-28 14:02:26.094785+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	To;evaluate;if;the;Transformer;can;generalize;to;other;tasks;we;performed;experiments;on;English;constituency;parsing.;This;task;presents;specific;challenges:;the;output;is;subject;to;strong;structural;constraints;and;is;significantly;longer;than;the;input.;Furthermore,;RNN;sequence-to-sequence;models;have;not;been;able;to;attain;state-of-the-art;results;in;small-data;regimes;[REF].	5f2e3c77-51c7-47e9-94c0-68a7ca98caaf
2024-03-28 14:02:26.097262+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	We;trained;a;4-layer;transformer;with;dmodel;=;1024;on;the;Wall;Street;Journal;(WSJ);portion;of;the;Penn;Treebank;[REF],;about;40K;training;sentences.;We;also;trained;it;in;a;semi-supervised;setting,;using;the;larger;high-confidence;and;BerkleyParser;corpora;from;with;approximately;17M;sentences;[REF].;We;used;a;vocabulary;of;16K;tokens;for;the;WSJ;only;setting;and;a;vocabulary;of;32K;tokens;for;the;semi-supervised;setting.	f778c701-77dc-4b04-b7b0-cb8975814c2b
2024-03-28 14:02:26.099678+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Vinyals;&;Kaiser;el;al.;(2014);[REF];Petrov;et;al.;(2006);[REF]	ed12bd90-6932-41d6-8086-5e823a889116
2024-03-28 14:02:26.102125+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Zhu;et;al.;(2013);[REF]	2430c458-3ae9-48e3-a772-02155cc5a177
2024-03-28 14:02:26.104576+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Dyer;et;al.;(2016);[REF];Transformer;(4;layers)	b2f14a3d-9982-470d-8f54-6c673fc6f989
2024-03-28 14:02:26.107054+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Zhu;et;al.;(2013);[REF];Huang;&;Harper;(2009);[REF];McClosky;et;al.;(2006);[REF];Vinyals;&;Kaiser;el;al.;(2014);[REF];Transformer;(4;layers);Luong;et;al.;(2015);[REF];Dyer;et;al.;(2016);[REF]	d7545d7b-f6b9-4909-a453-36efc10e0607
2024-03-28 14:02:26.109527+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	Our;results;in;Table;4;show;that;despite;the;lack;of;task-specific;tuning;our;model;performs;sur-;prisingly;well,;yielding;better;results;than;all;previously;reported;models;with;the;exception;of;the;Recurrent;Neural;Network;Grammar;[REF].	9a3b9fa9-b44a-4b0a-ade7-158d7bd71474
2024-03-28 14:02:26.111954+00	0e70d6b6-c324-4354-aa7b-574b8b280d43	In;contrast;to;RNN;sequence-to-sequence;models;[REF],;the;Transformer;outperforms;the;Berkeley-;Parser;[REF];even;when;training;only;on;the;WSJ;training;set;of;40K;sentences.	a5356d16-53f1-4312-b394-88f78d61481a
\.


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.quotes (id, created_at, par_id, cited_doc, ref_loc, annotation_count, inter_annotation_agreement) FROM stdin;
ea160904-2e05-40d0-8c9a-dbcdda083d70	2024-03-28 14:22:53.283776+00	96553ad5-6bdc-428b-b0ad-8c60d61715fa	0e70d6b6-c324-4354-aa7b-574b8b280d43	6	0	\N
51d7d82a-5ea4-47cb-a54e-9da795374fae	2024-03-28 14:22:53.288505+00	96553ad5-6bdc-428b-b0ad-8c60d61715fa	0e70d6b6-c324-4354-aa7b-574b8b280d43	10	0	\N
db9ebbf7-025c-4f09-ac7b-86e6398b4164	2024-03-28 14:22:53.295492+00	96553ad5-6bdc-428b-b0ad-8c60d61715fa	0e70d6b6-c324-4354-aa7b-574b8b280d43	38	0	\N
454aa6ef-49ce-4ded-871a-6f36442842fa	2024-03-28 14:22:53.29965+00	96553ad5-6bdc-428b-b0ad-8c60d61715fa	0e70d6b6-c324-4354-aa7b-574b8b280d43	55	0	\N
c95c6d3b-41e9-499e-a26c-0f1b28cdbd0b	2024-03-28 14:22:53.30715+00	4e252ada-28f3-48bd-938c-c11a0113fa08	0e70d6b6-c324-4354-aa7b-574b8b280d43	81	0	\N
6d87d67d-f2df-4de8-a05c-18c73d25da2f	2024-03-28 14:22:53.310582+00	4e252ada-28f3-48bd-938c-c11a0113fa08	0e70d6b6-c324-4354-aa7b-574b8b280d43	85	0	\N
889c4782-4f33-4491-b40e-eebd50f68f4a	2024-03-28 14:22:53.315173+00	d0f24150-fa56-459a-8829-6e6d85839f92	0e70d6b6-c324-4354-aa7b-574b8b280d43	33	0	\N
ff689f47-f5b8-4c4f-9a4a-fe4450507da0	2024-03-28 14:22:53.317627+00	d0f24150-fa56-459a-8829-6e6d85839f92	0e70d6b6-c324-4354-aa7b-574b8b280d43	40	0	\N
a6b5b0c1-0bc7-4254-8bbd-ef69ff85799a	2024-03-28 14:22:53.320277+00	7ab3a02a-faa6-4624-b51d-4abd4a1a16a6	0e70d6b6-c324-4354-aa7b-574b8b280d43	15	0	\N
215182c0-f37d-44cd-badf-b143434aeb75	2024-03-28 14:22:53.322614+00	7ab3a02a-faa6-4624-b51d-4abd4a1a16a6	0e70d6b6-c324-4354-aa7b-574b8b280d43	17	0	\N
63ded2ce-a505-4c4b-a977-743e925ecd3e	2024-03-28 14:22:53.324936+00	7ab3a02a-faa6-4624-b51d-4abd4a1a16a6	0e70d6b6-c324-4354-aa7b-574b8b280d43	20	0	\N
a21e344d-7cc9-4e69-a6b3-b822baa0aea3	2024-03-28 14:22:53.327247+00	7ab3a02a-faa6-4624-b51d-4abd4a1a16a6	0e70d6b6-c324-4354-aa7b-574b8b280d43	85	0	\N
7c2e958f-e3c6-4f81-8472-5ee5516a9767	2024-03-28 14:22:53.329746+00	42559dd8-234a-496f-b155-fecebce46d07	0e70d6b6-c324-4354-aa7b-574b8b280d43	46	0	\N
f10abf2f-ca19-4baf-82b1-6cbc9aa1f7c9	2024-03-28 14:22:53.332273+00	61598555-ede3-4610-9858-8307de442503	0e70d6b6-c324-4354-aa7b-574b8b280d43	30	0	\N
815c14ff-ead7-4b0e-a574-60f7379c0931	2024-03-28 14:22:53.334924+00	dbaa424d-91a5-4cc2-a391-2237092bcb2a	0e70d6b6-c324-4354-aa7b-574b8b280d43	52	0	\N
f85fd63c-ba8e-4e28-8650-b7c7c9f7dfca	2024-03-28 14:22:53.338182+00	dbaa424d-91a5-4cc2-a391-2237092bcb2a	0e70d6b6-c324-4354-aa7b-574b8b280d43	54	0	\N
0afcb914-2f2a-4f89-92ff-366753210f2e	2024-03-28 14:22:53.341616+00	026ecd91-e739-4976-8c53-9137f3b3019f	0e70d6b6-c324-4354-aa7b-574b8b280d43	10	0	\N
91fc7386-6600-45ff-8240-7918faf8df53	2024-03-28 14:22:53.344519+00	026ecd91-e739-4976-8c53-9137f3b3019f	0e70d6b6-c324-4354-aa7b-574b8b280d43	57	0	\N
5de95cf9-12e3-4f69-a0e8-c5e424e94da6	2024-03-28 14:22:53.34759+00	3b62b4d0-769f-4f2c-b62c-c0abd898ee0c	0e70d6b6-c324-4354-aa7b-574b8b280d43	43	0	\N
553a7ffc-e699-4d28-a646-51c1513fce1a	2024-03-28 14:22:53.350523+00	3b62b4d0-769f-4f2c-b62c-c0abd898ee0c	0e70d6b6-c324-4354-aa7b-574b8b280d43	54	0	\N
009595e6-71af-4233-af13-b2444807f0cd	2024-03-28 14:22:53.353785+00	2f1cec49-b00a-44ff-9a1f-f98aed635b83	0e70d6b6-c324-4354-aa7b-574b8b280d43	10	0	\N
fa0d6ac5-1660-454d-a593-1376b712cb4b	2024-03-28 14:22:53.357678+00	d2588eee-5743-4908-b1e2-492ca04394a1	0e70d6b6-c324-4354-aa7b-574b8b280d43	24	0	\N
47c20c17-6168-4635-a90e-cca541c1d436	2024-03-28 14:22:53.360342+00	743dbfd2-6015-4486-8663-3f18d399e9e4	0e70d6b6-c324-4354-aa7b-574b8b280d43	54	0	\N
577e7be3-a6bf-4ac8-ab01-a87aedd45992	2024-03-28 14:22:53.362869+00	fb7b28d3-5a84-4fd0-b66a-354248dc6f4c	0e70d6b6-c324-4354-aa7b-574b8b280d43	4	0	\N
fc7ca0b1-3594-4272-8503-c4423600885f	2024-03-28 14:22:53.365334+00	d6faad0a-6f14-4924-b92a-8690c306c290	0e70d6b6-c324-4354-aa7b-574b8b280d43	88	0	\N
9667fb4a-dc77-44c8-8b76-305f99621fa9	2024-03-28 14:22:53.367891+00	4cd50666-2aa8-41da-bc01-b94743e7288d	0e70d6b6-c324-4354-aa7b-574b8b280d43	8	0	\N
74884b55-23be-43f0-8481-1549538a716f	2024-03-28 14:22:53.370465+00	383cf6c7-d310-4e1d-afad-0b6f858222c5	0e70d6b6-c324-4354-aa7b-574b8b280d43	73	0	\N
fb2356fb-e4c0-41d5-9e41-5aac0c8fa8ff	2024-03-28 14:22:53.373134+00	c19fde2a-4c48-403c-a604-a4c21898aa85	0e70d6b6-c324-4354-aa7b-574b8b280d43	28	0	\N
024cc353-00fb-4768-8449-63ec5945ce22	2024-03-28 14:22:53.37549+00	c19fde2a-4c48-403c-a604-a4c21898aa85	0e70d6b6-c324-4354-aa7b-574b8b280d43	31	0	\N
e4fbd865-6d07-49b7-aeb9-8fb803943ca5	2024-03-28 14:22:53.37801+00	67548f5b-d322-4cd2-830a-6af26fdf4b0d	0e70d6b6-c324-4354-aa7b-574b8b280d43	43	0	\N
863dced5-b45c-49db-bf26-7cb2ebc7c359	2024-03-28 14:22:53.380365+00	67548f5b-d322-4cd2-830a-6af26fdf4b0d	0e70d6b6-c324-4354-aa7b-574b8b280d43	74	0	\N
cc170e56-26df-438f-b95a-9f723eb9cd2f	2024-03-28 14:22:53.383221+00	ba65f555-e031-474d-8b65-718aa992595e	0e70d6b6-c324-4354-aa7b-574b8b280d43	22	0	\N
5a7e9b33-dadd-49e0-b36d-486cead5bfa8	2024-03-28 14:22:53.385687+00	ba65f555-e031-474d-8b65-718aa992595e	0e70d6b6-c324-4354-aa7b-574b8b280d43	57	0	\N
9716758d-aaa0-45f9-9654-8bf2c6d97727	2024-03-28 14:22:53.388569+00	2cd64327-c06e-4e09-b254-31c5dfc91228	0e70d6b6-c324-4354-aa7b-574b8b280d43	5	0	\N
1d24a8c9-47e5-4934-9333-ff414f4e04d5	2024-03-28 14:22:53.391135+00	0c597223-fb10-4c80-bce1-d5c4bb35c6d9	0e70d6b6-c324-4354-aa7b-574b8b280d43	1	0	\N
7aebddde-96e1-41e1-b729-3ea9bdcc2182	2024-03-28 14:22:53.393667+00	7fd3fb92-8cd1-45f6-ae0c-afd4e5d5798c	0e70d6b6-c324-4354-aa7b-574b8b280d43	3	0	\N
71e2a2a6-94cc-4106-af1c-82236c454ebe	2024-03-28 14:22:53.396192+00	80bdd6e3-492a-4eea-ab6a-85e0886c9e50	0e70d6b6-c324-4354-aa7b-574b8b280d43	3	0	\N
ce78e80d-1bd3-492b-b4e5-6521d92d7b43	2024-03-28 14:22:53.398853+00	3de92b93-e235-46a8-9b0c-fa9dee94b16e	0e70d6b6-c324-4354-aa7b-574b8b280d43	1	0	\N
181cbc77-481e-48c6-beaa-08b74c262b76	2024-03-28 14:22:53.401449+00	3ee4c58a-47ac-42cf-8151-052ec2d23c01	0e70d6b6-c324-4354-aa7b-574b8b280d43	1	0	\N
798ec00b-49a9-4cf2-b709-7133a798df30	2024-03-28 14:22:53.404+00	e042ba51-7e95-418a-a652-b405e79bf85f	0e70d6b6-c324-4354-aa7b-574b8b280d43	4	0	\N
3c78f7a4-c810-4536-b4a1-66f82eec6d97	2024-03-28 14:22:53.406386+00	e042ba51-7e95-418a-a652-b405e79bf85f	0e70d6b6-c324-4354-aa7b-574b8b280d43	9	0	\N
c0923f8a-305b-49bf-a927-d441574ac74a	2024-03-28 14:22:53.408836+00	e042ba51-7e95-418a-a652-b405e79bf85f	0e70d6b6-c324-4354-aa7b-574b8b280d43	12	0	\N
3b37e944-168d-4cc1-a6d9-81440ff8726a	2024-03-28 14:22:53.411441+00	bf6c0ae2-948e-4c70-b294-b483464e8eae	0e70d6b6-c324-4354-aa7b-574b8b280d43	5	0	\N
ee129c8a-6ccf-4867-a142-cc02fbd6ffc4	2024-03-28 14:22:53.414134+00	4d94d1c7-f780-4204-8196-cce44a0e6d7c	0e70d6b6-c324-4354-aa7b-574b8b280d43	13	0	\N
2581d070-0288-479d-b364-4ebae4e2c389	2024-03-28 14:22:53.41691+00	f2990e80-bc55-4814-b53b-c9d596a92350	0e70d6b6-c324-4354-aa7b-574b8b280d43	48	0	\N
83ae6030-e297-41a6-a1c6-e70266ceddfb	2024-03-28 14:22:53.419285+00	f2990e80-bc55-4814-b53b-c9d596a92350	0e70d6b6-c324-4354-aa7b-574b8b280d43	77	0	\N
af2a7008-9d52-4a04-97b1-eb6d1e00ad99	2024-03-28 14:22:53.42216+00	ba2c75a5-ec06-4bd3-9aa4-14d53cf3df2f	0e70d6b6-c324-4354-aa7b-574b8b280d43	74	0	\N
3d5f6bbd-eb48-49eb-9ec4-3d8c1afd23bf	2024-03-28 14:22:53.424866+00	5f2e3c77-51c7-47e9-94c0-68a7ca98caaf	0e70d6b6-c324-4354-aa7b-574b8b280d43	52	0	\N
018ae81e-3606-4bd6-841f-204bdbc26656	2024-03-28 14:22:53.427464+00	f778c701-77dc-4b04-b7b0-cb8975814c2b	0e70d6b6-c324-4354-aa7b-574b8b280d43	20	0	\N
2f09816f-f10f-400d-8375-6a235f6d6a3e	2024-03-28 14:22:53.429854+00	f778c701-77dc-4b04-b7b0-cb8975814c2b	0e70d6b6-c324-4354-aa7b-574b8b280d43	45	0	\N
3cd5db2c-c3d7-42c4-9b74-2fef951403cb	2024-03-28 14:22:53.433103+00	ed12bd90-6932-41d6-8086-5e823a889116	0e70d6b6-c324-4354-aa7b-574b8b280d43	6	0	\N
186565d3-f9c9-4663-afed-7190674ae2fd	2024-03-28 14:22:53.435608+00	ed12bd90-6932-41d6-8086-5e823a889116	0e70d6b6-c324-4354-aa7b-574b8b280d43	11	0	\N
d00174a8-8500-4346-ba0a-dc7dd8fb5fea	2024-03-28 14:22:53.438237+00	2430c458-3ae9-48e3-a772-02155cc5a177	0e70d6b6-c324-4354-aa7b-574b8b280d43	4	0	\N
2fb14a50-81e7-4732-97ce-ccd4303a72a6	2024-03-28 14:22:53.441066+00	b2f14a3d-9982-470d-8f54-6c673fc6f989	0e70d6b6-c324-4354-aa7b-574b8b280d43	4	0	\N
f7bad097-e806-4b0e-9a2a-9ce4870f2f58	2024-03-28 14:22:53.443704+00	d7545d7b-f6b9-4909-a453-36efc10e0607	0e70d6b6-c324-4354-aa7b-574b8b280d43	4	0	\N
1b3ab3e2-45f2-4981-aa5d-e44c8b493390	2024-03-28 14:22:53.446061+00	d7545d7b-f6b9-4909-a453-36efc10e0607	0e70d6b6-c324-4354-aa7b-574b8b280d43	9	0	\N
2fa42f85-614a-48ae-b716-95b5214cd4dd	2024-03-28 14:22:53.448857+00	d7545d7b-f6b9-4909-a453-36efc10e0607	0e70d6b6-c324-4354-aa7b-574b8b280d43	14	0	\N
46adf470-970e-42c6-b7f9-4dc352ab24b2	2024-03-28 14:22:53.451666+00	d7545d7b-f6b9-4909-a453-36efc10e0607	0e70d6b6-c324-4354-aa7b-574b8b280d43	21	0	\N
2bb00bd1-dc3e-4e88-b1a3-954ed4bc05cf	2024-03-28 14:22:53.454159+00	d7545d7b-f6b9-4909-a453-36efc10e0607	0e70d6b6-c324-4354-aa7b-574b8b280d43	29	0	\N
febce2f2-d44a-4d60-9abb-e2d9ac96c37d	2024-03-28 14:22:53.456767+00	d7545d7b-f6b9-4909-a453-36efc10e0607	0e70d6b6-c324-4354-aa7b-574b8b280d43	34	0	\N
39cb87fb-5caa-4d15-8c1e-ae039094e975	2024-03-28 14:22:53.459349+00	9a3b9fa9-b44a-4b0a-ade7-158d7bd71474	0e70d6b6-c324-4354-aa7b-574b8b280d43	36	0	\N
5102416d-f337-450d-9c6d-78e2733d8362	2024-03-28 14:22:53.461927+00	a5356d16-53f1-4312-b394-88f78d61481a	0e70d6b6-c324-4354-aa7b-574b8b280d43	6	0	\N
95b99a38-6a77-4492-ac72-25084cd8523f	2024-03-28 14:22:53.46426+00	a5356d16-53f1-4312-b394-88f78d61481a	0e70d6b6-c324-4354-aa7b-574b8b280d43	13	0	\N
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, first_name, created_at, last_name, role) FROM stdin;
ceef8227-e64c-4437-a8fb-49783a6f989e	Lasse	2024-03-28 10:33:36.707787	Jantsch	annotator
8f2bf7a3-6a48-445e-a6e3-9453551f9008	\N	2024-03-31 11:21:19.750389	\N	annotator
e0895de4-c1ca-458c-9097-8cb43c5e3321	\N	2024-03-29 08:42:35.893511	\N	reviewer
5917bb7b-c207-4b6c-b2ab-423f555a5dbd	\N	2024-04-02 07:12:01.148697	\N	annotator
bb7fe2a4-d4f0-416c-8891-5e09a0c10388	\N	2024-04-02 07:12:20.250271	\N	annotator
eb1ef1fa-a9b9-443f-b5b6-0e69888f953e	\N	2024-04-03 07:45:55.934409	\N	annotator
\.


--
-- Data for Name: broadcasts; Type: TABLE DATA; Schema: realtime; Owner: supabase_realtime_admin
--

COPY realtime.broadcasts (id, channel_id, "check", inserted_at, updated_at) FROM stdin;
\.


--
-- Data for Name: channels; Type: TABLE DATA; Schema: realtime; Owner: supabase_realtime_admin
--

COPY realtime.channels (id, name, inserted_at, updated_at, "check") FROM stdin;
\.


--
-- Data for Name: presences; Type: TABLE DATA; Schema: realtime; Owner: supabase_realtime_admin
--

COPY realtime.presences (id, channel_id, "check", inserted_at, updated_at) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2024-04-05 05:27:05
20211116045059	2024-04-05 05:27:06
20211116050929	2024-04-05 05:27:06
20211116051442	2024-04-05 05:27:07
20211116212300	2024-04-05 05:27:08
20211116213355	2024-04-05 05:27:09
20211116213934	2024-04-05 05:27:09
20211116214523	2024-04-05 05:27:10
20211122062447	2024-04-05 05:27:11
20211124070109	2024-04-05 05:27:12
20211202204204	2024-04-05 05:27:13
20211202204605	2024-04-05 05:27:13
20211210212804	2024-04-05 05:27:16
20211228014915	2024-04-05 05:27:17
20220107221237	2024-04-05 05:27:17
20220228202821	2024-04-05 05:27:18
20220312004840	2024-04-05 05:27:19
20220603231003	2024-04-05 05:27:20
20220603232444	2024-04-05 05:27:21
20220615214548	2024-04-05 05:27:21
20220712093339	2024-04-05 05:27:22
20220908172859	2024-04-05 05:27:23
20220916233421	2024-04-05 05:27:24
20230119133233	2024-04-05 05:27:24
20230128025114	2024-04-05 05:27:25
20230128025212	2024-04-05 05:27:26
20230227211149	2024-04-05 05:27:27
20230228184745	2024-04-05 05:27:27
20230308225145	2024-04-05 05:27:28
20230328144023	2024-04-05 05:27:29
20231018144023	2024-04-05 05:27:30
20231204144023	2024-04-05 05:27:31
20231204144024	2024-04-05 05:27:32
20231204144025	2024-04-05 05:27:32
20240108234812	2024-04-05 05:27:33
20240109165339	2024-04-05 05:27:34
20240227174441	2024-04-05 05:27:35
20240311171622	2024-04-05 05:27:36
20240321100241	2024-04-05 05:27:38
20240401105812	2024-04-05 05:27:40
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
avatars	avatars	\N	2024-03-28 06:15:02.941121+00	2024-03-28 06:15:02.941121+00	f	f	\N	\N	\N
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2024-03-28 05:43:57.364338
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2024-03-28 05:43:57.767316
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2024-03-28 05:43:58.22767
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2024-03-28 05:43:58.256124
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2024-03-28 05:43:58.330375
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2024-03-28 05:43:58.383682
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2024-03-28 05:43:58.435013
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2024-03-28 05:43:58.445615
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2024-03-28 05:43:58.454675
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2024-03-28 05:43:58.506561
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2024-03-28 05:43:58.516085
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2024-03-28 05:43:58.525754
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2024-03-28 05:43:58.578894
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2024-03-28 05:43:58.630991
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2024-03-28 05:43:58.683687
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2024-03-28 05:43:58.755459
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2024-03-28 05:43:58.764725
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2024-03-28 05:43:58.773896
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2024-03-28 05:43:58.826821
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2024-03-28 05:43:58.879024
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 100, true);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: broadcasts_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_realtime_admin
--

SELECT pg_catalog.setval('realtime.broadcasts_id_seq', 1, false);


--
-- Name: channels_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_realtime_admin
--

SELECT pg_catalog.setval('realtime.channels_id_seq', 1, false);


--
-- Name: presences_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_realtime_admin
--

SELECT pg_catalog.setval('realtime.presences_id_seq', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: annotations annotations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.annotations
    ADD CONSTRAINT annotations_pkey PRIMARY KEY (id);


--
-- Name: documents documents_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_pkey PRIMARY KEY (id);


--
-- Name: paragraphs paragraphs_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.paragraphs
    ADD CONSTRAINT paragraphs_pkey PRIMARY KEY (id);


--
-- Name: users profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- Name: quotes references_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.quotes
    ADD CONSTRAINT references_pkey PRIMARY KEY (id);


--
-- Name: broadcasts broadcasts_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.broadcasts
    ADD CONSTRAINT broadcasts_pkey PRIMARY KEY (id);


--
-- Name: channels channels_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.channels
    ADD CONSTRAINT channels_pkey PRIMARY KEY (id);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: presences presences_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.presences
    ADD CONSTRAINT presences_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: broadcasts_channel_id_index; Type: INDEX; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE UNIQUE INDEX broadcasts_channel_id_index ON realtime.broadcasts USING btree (channel_id);


--
-- Name: channels_name_index; Type: INDEX; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE UNIQUE INDEX channels_name_index ON realtime.channels USING btree (name);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING hash (entity);


--
-- Name: presences_channel_id_index; Type: INDEX; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE UNIQUE INDEX presences_channel_id_index ON realtime.presences USING btree (channel_id);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: users on_auth_user_created; Type: TRIGGER; Schema: auth; Owner: supabase_auth_admin
--

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


--
-- Name: annotations handle_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.annotations FOR EACH ROW EXECUTE FUNCTION extensions.moddatetime('updated_at');


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: users profiles_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: annotations public_annotations_ref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.annotations
    ADD CONSTRAINT public_annotations_ref_id_fkey FOREIGN KEY (ref_id) REFERENCES public.quotes(id);


--
-- Name: annotations public_annotations_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.annotations
    ADD CONSTRAINT public_annotations_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: paragraphs public_paragraphs_doc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.paragraphs
    ADD CONSTRAINT public_paragraphs_doc_id_fkey FOREIGN KEY (doc_id) REFERENCES public.documents(id);


--
-- Name: quotes public_references_cited_doc_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.quotes
    ADD CONSTRAINT public_references_cited_doc_fkey FOREIGN KEY (cited_doc) REFERENCES public.documents(id);


--
-- Name: quotes public_references_par_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.quotes
    ADD CONSTRAINT public_references_par_id_fkey FOREIGN KEY (par_id) REFERENCES public.paragraphs(id);


--
-- Name: broadcasts broadcasts_channel_id_fkey; Type: FK CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.broadcasts
    ADD CONSTRAINT broadcasts_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES realtime.channels(id) ON DELETE CASCADE;


--
-- Name: presences presences_channel_id_fkey; Type: FK CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.presences
    ADD CONSTRAINT presences_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES realtime.channels(id) ON DELETE CASCADE;


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: annotations Annotations are viewable by assigned User.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Annotations are viewable by assigned User." ON public.annotations FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: annotations Annotations are viewable by reviewers.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Annotations are viewable by reviewers." ON public.annotations FOR SELECT USING (true);


--
-- Name: documents Documents are viewable by everyone.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Documents are viewable by everyone." ON public.documents FOR SELECT USING (true);


--
-- Name: paragraphs Paragraphs are viewable by everyone.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Paragraphs are viewable by everyone." ON public.paragraphs FOR SELECT USING (true);


--
-- Name: users Public profiles are viewable by everyone.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public profiles are viewable by everyone." ON public.users FOR SELECT USING (true);


--
-- Name: quotes References are viewable by everyone.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "References are viewable by everyone." ON public.quotes FOR SELECT USING (true);


--
-- Name: users Users can insert their own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own profile." ON public.users FOR INSERT WITH CHECK ((auth.uid() = id));


--
-- Name: annotations Users can update own Annotations.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update own Annotations." ON public.annotations FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: users Users can update own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update own profile." ON public.users FOR UPDATE USING ((auth.uid() = id));


--
-- Name: annotations; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.annotations ENABLE ROW LEVEL SECURITY;

--
-- Name: documents; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;

--
-- Name: paragraphs; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.paragraphs ENABLE ROW LEVEL SECURITY;

--
-- Name: quotes; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.quotes ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

--
-- Name: broadcasts; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.broadcasts ENABLE ROW LEVEL SECURITY;

--
-- Name: channels; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.channels ENABLE ROW LEVEL SECURITY;

--
-- Name: presences; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.presences ENABLE ROW LEVEL SECURITY;

--
-- Name: objects Anyone can upload an avatar.; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Anyone can upload an avatar." ON storage.objects FOR INSERT WITH CHECK ((bucket_id = 'avatars'::text));


--
-- Name: objects Avatar images are publicly accessible.; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Avatar images are publicly accessible." ON storage.objects FOR SELECT USING ((bucket_id = 'avatars'::text));


--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION moddatetime(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.moddatetime() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.try_cast_double(inp text) FROM postgres;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_decode(data text) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_encode(data bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION comment_directive(comment_ text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO postgres;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO anon;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO authenticated;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO service_role;


--
-- Name: FUNCTION exception(message text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.exception(message text) TO postgres;
GRANT ALL ON FUNCTION graphql.exception(message text) TO anon;
GRANT ALL ON FUNCTION graphql.exception(message text) TO authenticated;
GRANT ALL ON FUNCTION graphql.exception(message text) TO service_role;


--
-- Name: FUNCTION get_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.get_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO service_role;


--
-- Name: FUNCTION increment_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.increment_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO service_role;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION lo_export(oid, text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_export(oid, text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_export(oid, text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text, oid); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text, oid) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text, oid) TO supabase_admin;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION handle_new_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_new_user() TO anon;
GRANT ALL ON FUNCTION public.handle_new_user() TO authenticated;
GRANT ALL ON FUNCTION public.handle_new_user() TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION channel_name(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.channel_name() TO postgres;
GRANT ALL ON FUNCTION realtime.channel_name() TO dashboard_user;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT ALL ON TABLE auth.audit_log_entries TO postgres;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.flow_state TO postgres;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.identities TO postgres;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT ALL ON TABLE auth.instances TO postgres;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.mfa_amr_claims TO postgres;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.mfa_challenges TO postgres;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.mfa_factors TO postgres;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT ALL ON TABLE auth.refresh_tokens TO postgres;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.saml_providers TO postgres;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.saml_relay_states TO postgres;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT ALL ON TABLE auth.schema_migrations TO postgres;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.sessions TO postgres;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.sso_domains TO postgres;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.sso_providers TO postgres;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT ALL ON TABLE auth.users TO postgres;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: SEQUENCE seq_schema_version; Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE graphql.seq_schema_version TO postgres;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO anon;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO authenticated;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO service_role;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE annotations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.annotations TO anon;
GRANT ALL ON TABLE public.annotations TO authenticated;
GRANT ALL ON TABLE public.annotations TO service_role;


--
-- Name: TABLE documents; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.documents TO anon;
GRANT ALL ON TABLE public.documents TO authenticated;
GRANT ALL ON TABLE public.documents TO service_role;


--
-- Name: TABLE paragraphs; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.paragraphs TO anon;
GRANT ALL ON TABLE public.paragraphs TO authenticated;
GRANT ALL ON TABLE public.paragraphs TO service_role;


--
-- Name: TABLE progress_count; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.progress_count TO anon;
GRANT ALL ON TABLE public.progress_count TO authenticated;
GRANT ALL ON TABLE public.progress_count TO service_role;


--
-- Name: TABLE quotes; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.quotes TO anon;
GRANT ALL ON TABLE public.quotes TO authenticated;
GRANT ALL ON TABLE public.quotes TO service_role;


--
-- Name: TABLE users; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.users TO anon;
GRANT ALL ON TABLE public.users TO authenticated;
GRANT ALL ON TABLE public.users TO service_role;


--
-- Name: TABLE broadcasts; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.broadcasts TO postgres;
GRANT ALL ON TABLE realtime.broadcasts TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.broadcasts TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.broadcasts TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.broadcasts TO service_role;


--
-- Name: SEQUENCE broadcasts_id_seq; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON SEQUENCE realtime.broadcasts_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.broadcasts_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.broadcasts_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.broadcasts_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.broadcasts_id_seq TO service_role;


--
-- Name: TABLE channels; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.channels TO postgres;
GRANT ALL ON TABLE realtime.channels TO dashboard_user;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE realtime.channels TO anon;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE realtime.channels TO authenticated;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE realtime.channels TO service_role;


--
-- Name: SEQUENCE channels_id_seq; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON SEQUENCE realtime.channels_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.channels_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.channels_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.channels_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.channels_id_seq TO service_role;


--
-- Name: TABLE presences; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.presences TO postgres;
GRANT ALL ON TABLE realtime.presences TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.presences TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.presences TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.presences TO service_role;


--
-- Name: SEQUENCE presences_id_seq; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON SEQUENCE realtime.presences_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.presences_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.presences_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.presences_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.presences_id_seq TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

