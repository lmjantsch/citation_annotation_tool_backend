

#######################
#     Folder Tree     #
#######################

└── preprocessing
    ├── .DS_Store
    ├── 0__get_test_file_titles.ipynb
    ├── 1__preprocess.ipynb
    ├── 2.5__select_sample.ipynb
    ├── 2__data_cleaning.ipynb
    ├── 2p__data_cleaning.ipynb
    ├── 3.5.1__create_annotations.ipynb
    ├── 3.5__db_preparation.ipynb
    └── 3__structure_data.ipynb


#########################################
#     0__get_test_file_titles.ipynb     #
#########################################

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "DATA_DIR = '../data'\n",
    "DATA_SET = ['acl_arc','sdp_act']\n",
    "FILES =['test_raw.txt', 'train_raw.txt']\n",
    "\n",
    "title_df = pd.DataFrame(columns=('data', 'title'))\n",
    "\n",
    "for set in DATA_SET:\n",
    "    for file in FILES:\n",
    "        data_df = pd.read_csv(os.path.join(DATA_DIR, set, file), sep=\"\\t\", engine=\"python\", dtype=object)\n",
    "        for idx, row in data_df.iterrows():\n",
    "            title_df.loc[len(title_df)] = [set, row['cited_title'].lower()]\n",
    "            \n",
    "title_df.drop_duplicates(inplace=True)\n",
    "\n",
    "title_df.to_csv('../data/utility_data/excluded_titles.csv', index=False)\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


###############################
#     1__preprocess.ipynb     #
###############################

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import dependencies\n",
    "import os \n",
    "from xml.etree import ElementTree as ET\n",
    "import json\n",
    "from lxml import etree as ET\n",
    "from collections import defaultdict\n",
    "import pandas as pd\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining XML Namespaces: to process TEI(a form of XML Markup language) doc\n",
    "ns = {\n",
    "    'tei': 'http://www.tei-c.org/ns/1.0',\n",
    "    'xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n",
    "    'xlink': 'http://www.w3.org/1999/xlink'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set dir name\n",
    "\n",
    "#inport settings\n",
    "sample = True\n",
    "\n",
    "#set input and output dir\n",
    "if sample:\n",
    "    input_dir = 'sample/grobid_full_text'\n",
    "    output_dir = '../data/sample/1_json'\n",
    "    error_log_dir = 'sample/error'\n",
    "else:\n",
    "    input_dir = '/home/deallab/jisulee/CCE/data/grobid_full_text/'\n",
    "    output_dir = '../data/result/1_json'\n",
    "    error_log_dir = '../data/result/error'\n",
    "    \n",
    "#set ouput path if not exists\n",
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)\n",
    "\n",
    "#set ouput path if not exists\n",
    "if not os.path.exists(error_log_dir):\n",
    "    os.makedirs(error_log_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# to save file name which has an error\n",
    "error_files_list = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# to count the number of files\n",
    "total_files = 0\n",
    "files_processed = 0\n",
    "error_files_count = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert ref tags to [REF] format\n",
    "def convert_ref_tags(text):\n",
    "    if re.search(r'<ref type=\"bibr\">(.*?)</ref>',text):\n",
    "        pattern = r'<ref type=\\\"bibr\\\">(.*?)<\\/ref>'\n",
    "        replacement = r'<ref type=\"single\" target=\"#n999\">\\1</ref>'\n",
    "        text = re.sub(pattern, replacement, text)\n",
    "    pattern = r'<ref type=\\\"bibr\\\" target=\\\"#(.*?)\\\">(.*?)<\\/ref>'\n",
    "    replacement = r'<ref type=\"single\" target=\"#\\1\">\\2</ref>'\n",
    "    return re.sub(pattern, replacement, text)\n",
    "\n",
    "\n",
    "def replace_with_gref(match):\n",
    "    all_refs = match.group(0)\n",
    "    matches = re.findall(r'<ref type=\"single\" target=\"(#[a-z]\\d+)\">(.*?)</ref>', all_refs)\n",
    "    ids = ';'.join([match[0] for match in matches])\n",
    "    content = ' '.join([match[1] for match in matches])\n",
    "    return f'<ref type=\"group\" target=\"{ids}\">{content}</ref>'\n",
    "# convert paragraphs\n",
    "def process_paragraphs(paragraphs):\n",
    "    processed_paragraphs = []\n",
    "    for paragraph in paragraphs:\n",
    "\n",
    "            \n",
    "        processed_paragraph = convert_ref_tags(paragraph) # conver <ref> into [REF:#id]\n",
    "        pattern = r'(<ref type=\"single\"[^\\>]+>[^\\<]+<\\/ref> ?)+<ref type=\"single\"[^\\>]+>[^\\<]+<\\/ref>' # pattern of consecutive [REF:#id] tag\n",
    "        \n",
    "        clean_paragraph = re.sub(pattern, replace_with_gref, processed_paragraph)\n",
    "        \n",
    "        clean_paragraph = re.sub(r'<p[^\\>]+>(.*?)<\\/p>', r'\\1', clean_paragraph)\n",
    "    \n",
    "        clean_paragraph = re.sub(r'<(?=(?!\\/))(?!ref)[^\\>]+>[^\\<]+<[^\\>]+>', '', clean_paragraph)\n",
    "        \n",
    "        processed_paragraphs.append(clean_paragraph)\n",
    "    return processed_paragraphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_div(div):\n",
    "    \n",
    "    #remove other ref tags (without removing content)\n",
    "    cleaned_div = re.sub(r'<ref type=\"(?!bibr)[^\\>]+>([^\\<]+)<\\/ref>', r'\\1', div)\n",
    "\n",
    "    #remove p tags surrounding formulas\n",
    "    cleaned_div = re.sub(r'<\\/p><formula[^\\>]+>([^\\<]+)<\\/formula><p>',r'\\1', cleaned_div)\n",
    "    cleaned_div = re.sub(r'(<\\/p>)?<formula[^\\>]+>([^\\<]+)<\\/formula>(<p>)?',r'\\3\\2\\1', cleaned_div)\n",
    "    \n",
    "    #clean <div> and <head> tags\n",
    "    cleaned_div = re.findall(r'<p>(.*?)<\\/p>', cleaned_div)\n",
    "    \n",
    "    return cleaned_div"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "for filename in os.listdir(input_dir):\n",
    "    if filename.endswith('.xml'):\n",
    "        total_files += 1\n",
    "        xml_file_path = os.path.join(input_dir, filename)\n",
    "\n",
    "        try:\n",
    "            # Parsing XML file\n",
    "            tree = ET.parse(xml_file_path)\n",
    "            root = tree.getroot()\n",
    "\n",
    "            # Extract <Title>\n",
    "            title_element = root.find(\".//tei:teiHeader//tei:title[@type='main']\", ns)\n",
    "            title = title_element.text if title_element is not None else None\n",
    "\n",
    "            # Extract <authors (authors of master documents only)>\n",
    "            authors = []\n",
    "            for author in root.findall('.//tei:teiHeader//tei:author/tei:persName', ns):\n",
    "                first_name = author.find('tei:forename', ns).text if author.find('tei:forename', ns) is not None else None\n",
    "                last_name = author.find('tei:surname', ns).text if author.find('tei:surname', ns) is not None else None\n",
    "                authors.append({'first_name': first_name, 'last_name': last_name})\n",
    "\n",
    "            # Extract <year of publication>\n",
    "            doc_pub_year_element = filename.split('.')[0]\n",
    "            doc_pub_year = int(doc_pub_year_element) if doc_pub_year_element.isnumeric() else None\n",
    "\n",
    "            # Extract <abstract>\n",
    "            abstract_element = root.find('.//tei:teiHeader//tei:abstract//tei:p', ns)\n",
    "            abstract = abstract_element.text if abstract_element is not None else None\n",
    "            \n",
    "            #Extract langage\n",
    "            text_lang = root.find('tei:text', ns).get('{http://www.w3.org/XML/1998/namespace}lang')\n",
    "\n",
    "            # Extracted <section>\n",
    "            sections = []\n",
    "            for div in root.findall('.//tei:body/tei:div', ns):\n",
    "                paragraphs = clean_div(ET.tostring(div, encoding='unicode', method='xml'))\n",
    "                section_name = div.find('.//tei:head', ns).text if div.find('.//tei:head', ns) is not None else None\n",
    "                # paragraphs = [ET.tostring(p, encoding='unicode', method='xml') for p in div.findall('.//tei:p', ns)]\n",
    "                processed_paragraphs = process_paragraphs(paragraphs)\n",
    "                sections.append({'section_name': section_name, 'paragraphs': processed_paragraphs})\n",
    "\n",
    "            # Extract <references>\n",
    "            references = []\n",
    "            biblStruct_elements = root.findall('.//tei:listBibl/tei:biblStruct', ns)\n",
    "            for biblStruct in biblStruct_elements:\n",
    "                ref_id = biblStruct.get('{http://www.w3.org/XML/1998/namespace}id', \"Unknown ID\")\n",
    "                ref_title_element = biblStruct.find(\".//tei:title[@type='main']\", ns)\n",
    "                ref_title = ref_title_element.text if ref_title_element is not None else None\n",
    "                \n",
    "                ref_authors = []\n",
    "                for author in biblStruct.findall('.//tei:author/tei:persName', ns):\n",
    "                    first_name_element = author.find('tei:forename', ns)\n",
    "                    last_name_element = author.find('tei:surname', ns)\n",
    "                    first_name = first_name_element.text if first_name_element is not None else None\n",
    "                    last_name = last_name_element.text if last_name_element is not None else None\n",
    "                    ref_authors.append({'first_name': first_name, 'last_name': last_name})\n",
    "                \n",
    "                pub_year_element = biblStruct.find('.//tei:date[@type=\"published\"]', ns)\n",
    "                if pub_year_element is None:\n",
    "                    pub_year = None\n",
    "                else: \n",
    "                    match = re.search(r'[1-2][0,9]\\d{2}', pub_year_element.get('when'))\n",
    "                    pub_year = int(match.group(0)) if match else None\n",
    "                \n",
    "\n",
    "                \n",
    "                idno_element = biblStruct.find('.//tei:idno', ns)\n",
    "                idno_type = idno_element.get('type') if idno_element is not None else None\n",
    "                idno = idno_element.text.strip() if idno_element is not None else None\n",
    "                \n",
    "                reference = {\n",
    "                    'id': ref_id,\n",
    "                    'title': ref_title,\n",
    "                    'authors': ref_authors,\n",
    "                    'pub_year': pub_year,\n",
    "                }\n",
    "                if (idno_type and idno):\n",
    "                    reference['IDNO'] = {'type': idno_type, 'content': idno}\n",
    "                \n",
    "                references.append(reference)\n",
    "\n",
    "            document_data = {\n",
    "                'title': title,\n",
    "                'authors': authors,\n",
    "                'pub_year': doc_pub_year,\n",
    "                'lang': text_lang,\n",
    "                'abstract': abstract,\n",
    "                'IDNO': {'type': 'acl', 'content': 'aclanthology.org/' + filename[0:-8]},\n",
    "                'sections': sections,\n",
    "                'references' : references\n",
    "            }\n",
    "\n",
    "            json_output_path = os.path.join(output_dir, f\"{os.path.splitext(filename)[0]}.json\")\n",
    "            with open(json_output_path, 'w', encoding='utf-8') as json_file:\n",
    "                json.dump(document_data, json_file, indent=4, ensure_ascii=False)\n",
    "            \n",
    "            files_processed += 1\n",
    "                \n",
    "        except ET.ParseError:\n",
    "            error_files_count += 1\n",
    "            error_files_list.append(filename)\n",
    "        except Exception as e:\n",
    "            print(f\"Unexpected error processing {filename}: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished processing. Check 'error_files.txt' for list of problematic files.\n"
     ]
    }
   ],
   "source": [
    "#set ouput path if not exists\n",
    "if not os.path.exists(error_log_dir):\n",
    "    os.makedirs(error_log_dir)\n",
    "    \n",
    "with open(error_log_dir + 'log.txt', 'w', encoding='utf-8') as f:\n",
    "    for file in error_files_list:\n",
    "        f.write(f\"{file}\\n\")\n",
    "\n",
    "print(\"Finished processing. Check 'error_files.txt' for list of problematic files.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total XML files loaded: 82\n",
      "Total XML files processed: 80\n",
      "Total error files: 2\n"
     ]
    }
   ],
   "source": [
    "print(f\"Total XML files loaded: {total_files}\")\n",
    "print(f\"Total XML files processed: {files_processed}\")\n",
    "print(f\"Total error files: {error_files_count}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


####################################
#     2.5__select_sample.ipynb     #
####################################

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set dir name\n",
    "\n",
    "#full text\n",
    "input_dir = '../data/result/2_clean_json'\n",
    "output_dir = '../data/result/2.5_data_sample'\n",
    "output_stats_file = os.path.join(output_dir, 'average_stats.txt')\n",
    "output_selected_stats_file = os.path.join(output_dir, 'selected_file_stats.txt')\n",
    "\n",
    "#create output dir\n",
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = []\n",
    "pub_years = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read and extract data from each JSON file\n",
    "for filename in os.listdir(input_dir):\n",
    "    if filename.endswith('.json'):\n",
    "        file_path = os.path.join(input_dir, filename)\n",
    "        with open(file_path, 'r', encoding='utf-8') as file:\n",
    "            data = json.load(file)\n",
    "\n",
    "        # Extract data\n",
    "        pub_year = data.get('pub_year')\n",
    "        pub_years.append(pub_year)\n",
    "        num_sections = len(data.get('sections', []))\n",
    "        num_references = len(data.get('references', []))\n",
    "        paragraphs = [para for section in data.get('sections', []) for para in section.get('paragraphs', [])]\n",
    "        num_paragraphs = len(paragraphs)\n",
    "        num_ref_tags = sum(para.count('[REF') + para.count('[GREF') for para in paragraphs)\n",
    "\n",
    "        results.append({\n",
    "            'filename': filename,\n",
    "            'average_sections': num_sections,\n",
    "            'average_references': num_references,\n",
    "            'average_ref_tags_per_paragraph': num_ref_tags / num_paragraphs if num_paragraphs > 0 else 0,\n",
    "            'average_paragraphs': num_paragraphs,\n",
    "            'pub_year': pub_year\n",
    "        })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>average_sections</th>\n",
       "      <th>average_references</th>\n",
       "      <th>average_ref_tags_per_paragraph</th>\n",
       "      <th>average_paragraphs</th>\n",
       "      <th>pub_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020.icon-main.33.tei.json</td>\n",
       "      <td>8</td>\n",
       "      <td>19</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>13</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021.emnlp-main.33.tei.json</td>\n",
       "      <td>8</td>\n",
       "      <td>17</td>\n",
       "      <td>1.875000</td>\n",
       "      <td>8</td>\n",
       "      <td>2021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022.naacl-demo.11.tei.json</td>\n",
       "      <td>6</td>\n",
       "      <td>23</td>\n",
       "      <td>1.409091</td>\n",
       "      <td>22</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021.ranlp-srw.26.tei.json</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>1.375000</td>\n",
       "      <td>8</td>\n",
       "      <td>2021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020.emnlp-main.404.tei.json</td>\n",
       "      <td>7</td>\n",
       "      <td>21</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       filename  average_sections  average_references  \\\n",
       "0    2020.icon-main.33.tei.json                 8                  19   \n",
       "1   2021.emnlp-main.33.tei.json                 8                  17   \n",
       "2   2022.naacl-demo.11.tei.json                 6                  23   \n",
       "3    2021.ranlp-srw.26.tei.json                 3                   6   \n",
       "4  2020.emnlp-main.404.tei.json                 7                  21   \n",
       "\n",
       "   average_ref_tags_per_paragraph  average_paragraphs  pub_year  \n",
       "0                        2.000000                  13      2020  \n",
       "1                        1.875000                   8      2021  \n",
       "2                        1.409091                  22      2022  \n",
       "3                        1.375000                   8      2021  \n",
       "4                        2.000000                  10      2020  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(results)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute overall averages and visualize publication years\n",
    "mean_values = df.mean()\n",
    "pub_year_df = pd.Series(pub_years).value_counts().sort_index()\n",
    "pub_year_df.plot(kind='bar', figsize=(12, 6))\n",
    "plt.title('Distribution of Publication Years')\n",
    "plt.xlabel('Publication Year')\n",
    "plt.ylabel('Number of Documents')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # select 20 samples\n",
    "# top_years = pub_year_df.sort_values(ascending=False).index[:19]  # Get top 19 years\n",
    "# top_3_years = top_years[:3]  # Top 3 years\n",
    "# next_16_years = top_years[3:17]  # Next 14 top years\n",
    "\n",
    "# sampled_dfs = []\n",
    "# # Sample 2 documents from each of the top 3 years\n",
    "# for year in top_3_years:\n",
    "#     sampled_dfs.append(df[df['pub_year'] == year].sample(n=2, random_state=1))\n",
    "\n",
    "# # Sample 1 document from each of the next 16 years\n",
    "# for year in next_16_years:\n",
    "#     sampled_dfs.append(df[df['pub_year'] == year].sample(n=1, random_state=1))\n",
    "\n",
    "\n",
    "# select 145 samples\n",
    "top_years = pub_year_df.sort_values(ascending=False).index[:46]  # Get top 46 years\n",
    "top_3_years = top_years[:3]  # Top 3 years\n",
    "next_28_years = top_years[3:31]  # Next 28 top years\n",
    "next_15_years = top_years[31:46]  # Next 15 top years\n",
    "\n",
    "sampled_dfs = []\n",
    "# Sample 15 documents from each of the top 3 years\n",
    "for year in top_3_years:\n",
    "    sampled_dfs.append(df[df['pub_year'] == year].sample(n=10, random_state=1))\n",
    "\n",
    "# Sample 3 document from each of the next 28 years\n",
    "for year in next_28_years:\n",
    "    sampled_dfs.append(df[df['pub_year'] == year].sample(n=1, random_state=1))\n",
    "\n",
    "# Sample 1 document from each of the next 15 years (1952~1990, 1998)\n",
    "# for year in next_15_years:\n",
    "#     sampled_dfs.append(df[df['pub_year'] == year].sample(n=1, random_state=1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concatenate all sampled dataframes\n",
    "selected_files = pd.concat(sampled_dfs)\n",
    "total_ref_tags = sum(selected_files['average_ref_tags_per_paragraph'] * selected_files['average_paragraphs'])\n",
    "\n",
    "selected_files_path = os.path.join(output_dir, 'selected_files.txt')\n",
    "with open(selected_files_path, 'w') as f:\n",
    "    for index, row in selected_files.iterrows():\n",
    "        f.write(f\"{row['filename']} - Sections: {row['average_sections']}, \")\n",
    "        f.write(f\"References: {row['average_references']}, \")\n",
    "        f.write(f\"Ref tags per paragraph: {row['average_ref_tags_per_paragraph']}, \")\n",
    "        f.write(f\"Paragraphs: {row['average_paragraphs']}, \")\n",
    "        f.write(f\"Publication year: {row['pub_year']}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save selected file information and calculate averages\n",
    "selected_mean_values = selected_files.mean()\n",
    "with open(output_selected_stats_file, 'w') as f:\n",
    "    f.write(f\"Overall Average Sections: {mean_values['average_sections']}\\n\")\n",
    "    f.write(f\"Overall Average References: {mean_values['average_references']}\\n\")\n",
    "    f.write(f\"Overall Average Ref Tags Per Paragraph: {mean_values['average_ref_tags_per_paragraph']}\\n\")\n",
    "    f.write(f\"Overall Average Paragraphs: {mean_values['average_paragraphs']}\\n\\n\")\n",
    "\n",
    "    f.write(f\"Selected Files Average Sections: {selected_mean_values['average_sections']}\\n\")\n",
    "    f.write(f\"Selected Files Average References: {selected_mean_values['average_references']}\\n\")\n",
    "    f.write(f\"Selected Files Average Ref Tags Per Paragraph: {selected_mean_values['average_ref_tags_per_paragraph']}\\n\")\n",
    "    f.write(f\"Selected Files Average Paragraphs: {selected_mean_values['average_paragraphs']}\\n\\n\")\n",
    "    \n",
    "    f.write(f\"Total REF/GREF tags in selected documents: {total_ref_tags}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save information about selected files\n",
    "selected_files.to_csv(os.path.join(output_dir, 'selected_files_info.csv'), index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1008x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the metrics and compute overall means\n",
    "metrics = ['average_sections', 'average_references', 'average_ref_tags_per_paragraph', 'average_paragraphs']\n",
    "overall_means = df.mean()\n",
    "\n",
    "fig, axs = plt.subplots(2, 2, figsize=(14, 10))\n",
    "axs = axs.ravel()\n",
    "\n",
    "for i, metric in enumerate(metrics):\n",
    "    # Draw the histogram for selected files without KDE\n",
    "    sns.histplot(selected_files[metric], bins=10, stat=\"density\", color=\"pink\", ax=axs[i], alpha=0.7, label='Selected Files')\n",
    "    \n",
    "    # Explicitly draw the KDE line for selected files\n",
    "    sns.kdeplot(selected_files[metric], color=\"deeppink\", ax=axs[i], bw_adjust=0.5, lw=1.8, label='KDE of Selected Files')\n",
    "\n",
    "    # KDE plot for overall data (just the line, no histogram)\n",
    "    sns.kdeplot(df[metric], color=\"gray\", ax=axs[i], bw_adjust=0.5, lw=1.5, label='Overall Data KDE')\n",
    "\n",
    "    # Line for overall mean\n",
    "    axs[i].axvline(overall_means[metric], color='red', linestyle='dashed', linewidth=1, label='Overall Mean')\n",
    "    \n",
    "    axs[i].set_title(f'Distribution of {metric.replace(\"_\", \" \").capitalize()}')\n",
    "    axs[i].set_xlabel(f'{metric.replace(\"_\", \" \").capitalize()}')\n",
    "    axs[i].set_ylabel('Density')\n",
    "    axs[i].legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


##################################
#     2__data_cleaning.ipynb     #
##################################

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import json\n",
    "import re\n",
    "from difflib import SequenceMatcher"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import excluded titles\n",
    "excluded_titles = pd.read_csv('../data/utility_data/excluded_titles.csv')\n",
    "\n",
    "#inport settings\n",
    "sample = True\n",
    "\n",
    "#set input and output dir\n",
    "if sample:\n",
    "    input_dir = '../data/sample/1_json'\n",
    "    output_dir = '../data/sample/2_clean_json'\n",
    "else:\n",
    "    input_dir = '../data/result/1_json'\n",
    "    output_dir = '../data/result/2_clean_json'\n",
    "    \n",
    "#set ouput path if not exists\n",
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_files_loaded = 0\n",
    "processed_files_count = 0\n",
    "total_paragraphs_count = 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Europarl: A Parallel Corpus for Statistical Machine Translation europarl a parallel corpus for statistical machine translation\n"
     ]
    }
   ],
   "source": [
    "#total files in input dir\n",
    "total_files_loaded = len(os.listdir(input_dir))\n",
    "\n",
    "#iterate over all files\n",
    "for filename in os.listdir(input_dir):\n",
    "    \n",
    "    #open document if .json\n",
    "    if filename.endswith('.json'):  \n",
    "        input_file_path = os.path.join(input_dir, filename)\n",
    "        with open(input_file_path, 'r', encoding='utf-8') as file:\n",
    "            data = json.load(file)\n",
    "            \n",
    "        # skipp documents with faulty meta data or insufficient size\n",
    "        if data['title'] is None or \\\n",
    "            len(data['authors']) < 1 or \\\n",
    "            any(auth['last_name'] is None for auth in data['authors']) or \\\n",
    "            data['pub_year'] is None or data['pub_year'] < 1950 or data['pub_year'] > 2024 or \\\n",
    "            len(data['references']) < 5 or \\\n",
    "            len(data['sections']) < 3 or\\\n",
    "            data['lang'] != 'en':\n",
    "                continue\n",
    "            \n",
    "        #check whether title is in excluded titles\n",
    "        title_is_dublicate = False\n",
    "        for title in excluded_titles['title']:\n",
    "            s = SequenceMatcher(None, data['title'], title)\n",
    "            if s.ratio() > 0.80:\n",
    "                print(data['title'], title)\n",
    "                title_is_dublicate = True\n",
    "                break\n",
    "        if title_is_dublicate:\n",
    "            continue\n",
    "        \n",
    "        # Filter Paragraphs and count the cumulative count\n",
    "        # delete all paragraphs that have no refs\n",
    "        filtered_sections = []\n",
    "        targets = [ref['id'] for ref in data['references']]\n",
    "        for section in data.get('sections', []):\n",
    "            pars = ''.join(section['paragraphs'])\n",
    "            if re.search(r'<ref.*?<\\/ref>', pars) is not None:\n",
    "                filtered_sections.append(section)                                   \n",
    "                total_paragraphs_count += len(section['paragraphs'])\n",
    "            else:\n",
    "                continue\n",
    "            \n",
    "        data['sections'] = filtered_sections\n",
    "        \n",
    "        #check for insufficient length after removing references and paragraphs\n",
    "        if len(data['references']) < 5 or \\\n",
    "           len(data['sections']) < 3:\n",
    "            continue\n",
    "\n",
    "           \n",
    "        # save file\n",
    "        output_file_path = os.path.join(output_dir, filename)     \n",
    "        with open(output_file_path, 'w', encoding='utf-8') as outfile:\n",
    "            json.dump(data, outfile, indent=4, ensure_ascii=False)\n",
    "        processed_files_count += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total loaded files: 80\n",
      "Total processed files: 73\n",
      "Total paragraphs count: 2258\n"
     ]
    }
   ],
   "source": [
    "print(f\"Total loaded files: {total_files_loaded}\")\n",
    "print(f\"Total processed files: {processed_files_count}\")\n",
    "print(f\"Total paragraphs count: {total_paragraphs_count}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


###################################
#     2p__data_cleaning.ipynb     #
###################################

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import re\n",
    "import nltk\n",
    "from uuid import uuid4 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set dir name\n",
    "\n",
    "#inport settings\n",
    "sample = False\n",
    "\n",
    "#set input and output dir\n",
    "if sample:\n",
    "    input_dir = 'sample/1_json'\n",
    "    output_dir = 'sample/2_clean_json'\n",
    "else:\n",
    "    input_dir = '../data/result/1_json'\n",
    "    output_dir = '../model_training/data'\n",
    "    \n",
    "#set ouput path if not exists\n",
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_files_loaded = 0\n",
    "processed_files_count = 0\n",
    "total_sent_count = 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#helper \n",
    "def clean_sent(sent):\n",
    "    sent = re.sub(r'\\[(G?REF):.*\\]', r'[\\g<1>]', sent)\n",
    "    sent = re.sub(r'[^a-zA-Z0-9\\s.,;!-_+*/%&?{([\\])}]','', sent)\n",
    "    return sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#total files in input dir\n",
    "total_files_loaded = len(os.listdir(input_dir))\n",
    "\n",
    "full_data_dict = {}\n",
    "\n",
    "#iterate over all files\n",
    "for i, filename in enumerate(os.listdir(input_dir)):\n",
    "    #open document if .json\n",
    "    if filename.endswith('.json'):  \n",
    "        input_file_path = os.path.join(input_dir, filename)\n",
    "        with open(input_file_path, 'r', encoding='utf-8') as file:\n",
    "            data = json.load(file)\n",
    "        \n",
    "        # skipp documents with faulty meta data or insufficient size\n",
    "        if data['title'] is None or \\\n",
    "            len(data['authors']) < 1 or \\\n",
    "            len(data['sections']) < 3:\n",
    "                continue\n",
    "        processed_files_count += 1\n",
    "        doc_id = 'ACL_'+'_'.join(filename.split('.')[:-2])\n",
    "        sent_dict = {}\n",
    "        for section in data['sections']:\n",
    "            if len(section) < 2: continue\n",
    "            sent_dict['-'.join([doc_id,str(len(sent_dict))])] = '**' + section['section_name'] + '**' if section['section_name'] else '****'\n",
    "            for par in section['paragraphs']:\n",
    "                sents = nltk.sent_tokenize(clean_sent(par))\n",
    "                if len(sents) < 3: continue\n",
    "                sent_dict['-'.join([doc_id,str(len(sent_dict))])] = '&&&&'\n",
    "                for sent in sents:\n",
    "                    sent_dict['-'.join([doc_id,str(len(sent_dict))])] = sent\n",
    "                    total_sent_count += 1\n",
    "        full_data_dict[doc_id] = sent_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save file\n",
    "output_file_path = os.path.join(output_dir, '/raid/deallab/CCE_Data/2p_full_data.json')     \n",
    "with open(output_file_path, 'w', encoding='utf-8') as outfile:\n",
    "    json.dump(full_data_dict, outfile, indent=4, ensure_ascii=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total loaded files: 71641\n",
      "Total processed files: 69953\n",
      "Total Sentence count: 7555500\n"
     ]
    }
   ],
   "source": [
    "print(f\"Total loaded files: {total_files_loaded}\")\n",
    "print(f\"Total processed files: {processed_files_count}\")\n",
    "print(f\"Total Sentence count: {total_sent_count}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


###########################################
#     3.5.1__create_annotations.ipynb     #
###########################################

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from uuid import uuid4\n",
    "import random\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set dir name\n",
    "\n",
    "#inport settings\n",
    "sample = True\n",
    "\n",
    "#set input and output dir\n",
    "if sample:\n",
    "    input_dir = '../data/sample/3.5_db_ready_data'\n",
    "    output_dir = '../data/sample/3.5_db_ready_data'\n",
    "else:\n",
    "    input_dir = '../data/result/3.5_db_ready_data'\n",
    "    output_dir = '../data/result/3.5_db_ready_data'\n",
    "    \n",
    "#set ouput path if not exists\n",
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load data\n",
    "ref_df = pd.read_csv(input_dir + '/db_ref.csv')\n",
    "doc_df = pd.read_csv(input_dir + '/db_doc.csv')\n",
    "cited_doc_df = pd.read_csv(input_dir + '/db_cited_doc.csv')\n",
    "\n",
    "#used_refs = pd.concat([pd])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>ref_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b614b18d-d6e6-44c1-82f6-cd6bfcd975f7</td>\n",
       "      <td>0d16a18f-0c78-4ee8-a2f7-34418beeeeb6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>27bceafd-e469-42ef-af63-c59ab4e1dc1c</td>\n",
       "      <td>0d16a18f-0c78-4ee8-a2f7-34418beeeeb6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5a5fb90d-8b63-41e0-9647-65aa975c3a82</td>\n",
       "      <td>149c8a08-8436-4221-8817-20bd2a51d6d0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27bceafd-e469-42ef-af63-c59ab4e1dc1c</td>\n",
       "      <td>149c8a08-8436-4221-8817-20bd2a51d6d0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2f3aacef-d202-402d-b257-5c232b1c55c9</td>\n",
       "      <td>0f33d962-5520-4079-a88d-bcf868e7f3d1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                user_id                                ref_id\n",
       "0  b614b18d-d6e6-44c1-82f6-cd6bfcd975f7  0d16a18f-0c78-4ee8-a2f7-34418beeeeb6\n",
       "1  27bceafd-e469-42ef-af63-c59ab4e1dc1c  0d16a18f-0c78-4ee8-a2f7-34418beeeeb6\n",
       "2  5a5fb90d-8b63-41e0-9647-65aa975c3a82  149c8a08-8436-4221-8817-20bd2a51d6d0\n",
       "3  27bceafd-e469-42ef-af63-c59ab4e1dc1c  149c8a08-8436-4221-8817-20bd2a51d6d0\n",
       "4  2f3aacef-d202-402d-b257-5c232b1c55c9  0f33d962-5520-4079-a88d-bcf868e7f3d1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# test\n",
    "user_ids = {\n",
    "    'minjun':'5a5fb90d-8b63-41e0-9647-65aa975c3a82',\n",
    "    'jisu':'2f3aacef-d202-402d-b257-5c232b1c55c9',\n",
    "    'lasse':'f4765c8b-411c-4c95-8986-94ff4bb7b8c4',\n",
    "    'joel':'b614b18d-d6e6-44c1-82f6-cd6bfcd975f7',\n",
    "    'dongjae':'27bceafd-e469-42ef-af63-c59ab4e1dc1c',\n",
    "    }\n",
    "active_users = [v for k, v in user_ids.items() if k in ['lasse', 'jisu', 'joel', 'minjun', 'dongjae']]\n",
    "user_pairs =[]\n",
    "for i in range(len(active_users)):\n",
    "    for j in range(i +1, len(active_users)):\n",
    "        user_pairs.append([active_users[i],active_users[j]])\n",
    "\n",
    "random.shuffle(user_pairs)\n",
    "\n",
    "ann_df = pd.DataFrame(columns=['user_id', 'ref_id'])\n",
    "\n",
    "prev_samples = set(prev_df['ref_id'].to_list())\n",
    "\n",
    "options = random.sample(ref_df['id'].to_list(), len(ref_df))\n",
    "samples = []\n",
    "while len(samples) < 25:\n",
    "    s = options.pop()\n",
    "    if s not in prev_samples:\n",
    "        samples.append(s)\n",
    "\n",
    "for i, samp in enumerate(samples):\n",
    "    for u in user_pairs[i%len(user_pairs)]:\n",
    "        ann_df.loc[len(ann_df)] = [u, samp]\n",
    "        \n",
    "\n",
    "ann_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1137"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filter ref_id (only one id per par)\n",
    "par_ids = ref_df['par_id'].unique().tolist()\n",
    "samples = []\n",
    "for par_id in par_ids:\n",
    "    ref_ids = ref_df[ref_df['par_id']==par_id]['id'].tolist()\n",
    "    if len(ref_ids) == 1:\n",
    "        samples.append(ref_ids[0])\n",
    "    else:\n",
    "        doc_ids = [cited_doc_df[cited_doc_df['ref_id']==id]['doc_id'].tolist() for id in ref_ids]\n",
    "        rating = []\n",
    "        for docs in doc_ids:\n",
    "            rating_ = []\n",
    "            for doc in docs:\n",
    "                row = doc_df[doc_df['id']==doc]\n",
    "                if row['title'].values[0] == 'unknown':\n",
    "                    rating_.append(False)\n",
    "                else:\n",
    "                    rating_.append(True)\n",
    "            rating.append(any(rating_))\n",
    "        better_refs = [id for i, id in enumerate(ref_ids) if rating[i] ]\n",
    "        if better_refs:\n",
    "            samples.append(random.sample(better_refs, 1)[0])\n",
    "        else:\n",
    "            samples.append(random.sample(ref_ids, 1)[0])\n",
    "len(samples)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_ids = {\n",
    "    'minjun':'5a5fb90d-8b63-41e0-9647-65aa975c3a82',\n",
    "    'jisu':'2f3aacef-d202-402d-b257-5c232b1c55c9',\n",
    "    'lasse':'f4765c8b-411c-4c95-8986-94ff4bb7b8c4',\n",
    "    'joel':'b614b18d-d6e6-44c1-82f6-cd6bfcd975f7',\n",
    "    'dongjae':'27bceafd-e469-42ef-af63-c59ab4e1dc1c',\n",
    "    }\n",
    "active_users = [v for k, v in user_ids.items() if k in ['lasse', 'jisu', 'joel', 'minjun', 'dongjae']]\n",
    "\n",
    "user_pairs =[]\n",
    "for i in range(len(active_users)):\n",
    "    for j in range(i +1, len(active_users)):\n",
    "        user_pairs.append([active_users[i],active_users[j]])\n",
    "random.shuffle(user_pairs)\n",
    "\n",
    "samples = random.sample(samples, len(samples))\n",
    "\n",
    "q = round(len(samples)/4)\n",
    "\n",
    "sample_1 = samples[:q]\n",
    "sample_2 = samples[q:q*2]\n",
    "sample_3 = samples[q*2:q*3]\n",
    "sample_4 = samples[q*3:]\n",
    "\n",
    "\n",
    "for nr, sample in enumerate([sample_1, sample_2, sample_3, sample_4]):\n",
    "    ann_df = pd.DataFrame(columns=['user_id', 'ref_id', 'guideline_version'])\n",
    "    t_1, t_2 = train_test_split(sample, test_size=0.1)\n",
    "    for i,task in enumerate(t_1):\n",
    "        ann_df.loc[len(ann_df)] = [active_users[i%len(active_users)], task, 2.0]\n",
    "    for i, task in enumerate(t_2):\n",
    "        for user in user_pairs[i%len(user_pairs)]:\n",
    "            ann_df.loc[len(ann_df)] = [user, task, 2.0]\n",
    "    ann_df.to_csv(output_dir + f'/db_ann_06_04_nr_{nr}.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save data\n",
    "#ann_df.to_csv(output_dir + '/db_ann_test_23_5.csv', index=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>created_at</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ref_id</th>\n",
       "      <th>status</th>\n",
       "      <th>task_status</th>\n",
       "      <th>comment</th>\n",
       "      <th>updated_at</th>\n",
       "      <th>context_location</th>\n",
       "      <th>guideline_version</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00145731-96ef-4058-a7a3-2162374b82a8</td>\n",
       "      <td>2024-06-24 02:51:31.290824+00</td>\n",
       "      <td>b614b18d-d6e6-44c1-82f6-cd6bfcd975f7</td>\n",
       "      <td>d644c245-27f5-4d66-980b-a6bfc5521453</td>\n",
       "      <td>annotated</td>\n",
       "      <td>open</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2024-06-30 18:30:05.954347+00</td>\n",
       "      <td>[2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0...</td>\n",
       "      <td>2.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0048865e-935e-4785-a040-a09586a9143b</td>\n",
       "      <td>2024-06-04 23:51:16.657934+00</td>\n",
       "      <td>b614b18d-d6e6-44c1-82f6-cd6bfcd975f7</td>\n",
       "      <td>b995c9bc-6d9a-4c02-a61d-5562e7b01d99</td>\n",
       "      <td>annotated</td>\n",
       "      <td>open</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2024-06-08 07:08:21.634279+00</td>\n",
       "      <td>[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>007e47cb-d9be-49df-8e73-0bed7e5d5488</td>\n",
       "      <td>2024-06-04 23:51:16.657934+00</td>\n",
       "      <td>b614b18d-d6e6-44c1-82f6-cd6bfcd975f7</td>\n",
       "      <td>42961dcc-aa43-4df6-9dd7-c1c5416b5712</td>\n",
       "      <td>annotated</td>\n",
       "      <td>open</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2024-06-09 06:29:40.572677+00</td>\n",
       "      <td>[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00f1a196-df04-4c1e-a3a8-b8aea7e77605</td>\n",
       "      <td>2024-06-10 07:10:15.718589+00</td>\n",
       "      <td>27bceafd-e469-42ef-af63-c59ab4e1dc1c</td>\n",
       "      <td>e2967de0-c95e-443c-b0e7-364773b98c30</td>\n",
       "      <td>annotated</td>\n",
       "      <td>open</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2024-06-29 06:12:59.071676+00</td>\n",
       "      <td>[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3...</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01450336-c697-4975-94fb-b7ccffedb3b4</td>\n",
       "      <td>2024-06-04 23:51:16.657934+00</td>\n",
       "      <td>b614b18d-d6e6-44c1-82f6-cd6bfcd975f7</td>\n",
       "      <td>372c85ac-7fc8-4c5d-a812-2299205075ae</td>\n",
       "      <td>annotated</td>\n",
       "      <td>open</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2024-06-08 07:05:52.613698+00</td>\n",
       "      <td>[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3...</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     id                     created_at  \\\n",
       "0  00145731-96ef-4058-a7a3-2162374b82a8  2024-06-24 02:51:31.290824+00   \n",
       "1  0048865e-935e-4785-a040-a09586a9143b  2024-06-04 23:51:16.657934+00   \n",
       "2  007e47cb-d9be-49df-8e73-0bed7e5d5488  2024-06-04 23:51:16.657934+00   \n",
       "3  00f1a196-df04-4c1e-a3a8-b8aea7e77605  2024-06-10 07:10:15.718589+00   \n",
       "4  01450336-c697-4975-94fb-b7ccffedb3b4  2024-06-04 23:51:16.657934+00   \n",
       "\n",
       "                                user_id                                ref_id  \\\n",
       "0  b614b18d-d6e6-44c1-82f6-cd6bfcd975f7  d644c245-27f5-4d66-980b-a6bfc5521453   \n",
       "1  b614b18d-d6e6-44c1-82f6-cd6bfcd975f7  b995c9bc-6d9a-4c02-a61d-5562e7b01d99   \n",
       "2  b614b18d-d6e6-44c1-82f6-cd6bfcd975f7  42961dcc-aa43-4df6-9dd7-c1c5416b5712   \n",
       "3  27bceafd-e469-42ef-af63-c59ab4e1dc1c  e2967de0-c95e-443c-b0e7-364773b98c30   \n",
       "4  b614b18d-d6e6-44c1-82f6-cd6bfcd975f7  372c85ac-7fc8-4c5d-a812-2299205075ae   \n",
       "\n",
       "      status task_status comment                     updated_at  \\\n",
       "0  annotated        open     NaN  2024-06-30 18:30:05.954347+00   \n",
       "1  annotated        open     NaN  2024-06-08 07:08:21.634279+00   \n",
       "2  annotated        open     NaN  2024-06-09 06:29:40.572677+00   \n",
       "3  annotated        open     NaN  2024-06-29 06:12:59.071676+00   \n",
       "4  annotated        open     NaN  2024-06-08 07:05:52.613698+00   \n",
       "\n",
       "                                    context_location  guideline_version  \n",
       "0  [2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0...                2.2  \n",
       "1  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...                2.0  \n",
       "2  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...                2.0  \n",
       "3  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3...                2.1  \n",
       "4  [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3...                2.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path = '/raid/deallab/CCE_Data/raw_data/finecite/db_out_07_15/annotations_rows.csv'\n",
    "\n",
    "df = pd.read_csv(path)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "iaa_samples = df[df['status'] == 'annotated']\n",
    "iaa_samples = iaa_samples[iaa_samples.duplicated(subset='ref_id', keep=False)]\n",
    "iaa_sample_ids = set(iaa_samples['ref_id'])\n",
    "\n",
    "ann_df = pd.DataFrame(columns=['user_id', 'ref_id', 'guideline_version'])\n",
    "user_id = '5e297a70-0e98-474c-a27e-ffc2f18d910e'\n",
    "for s_id in iaa_sample_ids:\n",
    "    ann_df.loc[len(ann_df)] = [user_id, s_id, 3.0]\n",
    "\n",
    "ann_df.to_csv('/raid/deallab/CCE_Data/iaa_samples.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "lasse",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


#####################################
#     3.5__db_preparation.ipynb     #
#####################################

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set dir name\n",
    "\n",
    "#inport settings\n",
    "sample = True\n",
    "\n",
    "#set input and output dir\n",
    "if sample:\n",
    "    input_dir = '../data/sample/3_structured_data'\n",
    "    output_dir = '../data/sample/3.5_db_ready_data'\n",
    "else:\n",
    "    input_dir = '../data/result/3_structured_data'\n",
    "    output_dir = '../data/result/3.5_db_ready_data'\n",
    "    \n",
    "#set ouput path if not exists\n",
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load data\n",
    "ref_df = pd.read_csv(input_dir + '/ref.csv')\n",
    "par_df = pd.read_csv(input_dir + '/par.csv')\n",
    "doc_df = pd.read_csv(input_dir + '/doc.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ref_id</th>\n",
       "      <th>doc_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>cfc06ae8-61f3-4e68-a10d-86c30663a847</td>\n",
       "      <td>2e3d5752-e2ec-49c7-bc66-a2a7c07875b4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3bdcf8da-ac96-44d2-bdef-7a0f626588d1</td>\n",
       "      <td>dbf39945-c3ef-4fde-a98f-1fa7afe85d37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>aca2c3e5-d8e4-4430-b259-9a50ec3e2ba4</td>\n",
       "      <td>4e0637a7-b2da-43bb-9d8c-b538ae8353ef</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>aca2c3e5-d8e4-4430-b259-9a50ec3e2ba4</td>\n",
       "      <td>28e6a7e3-7633-4d1c-90ac-9c260f56259c</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>aca2c3e5-d8e4-4430-b259-9a50ec3e2ba4</td>\n",
       "      <td>5fba9ffc-b6d5-41d8-997e-d43ea196447a</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 ref_id                                doc_id\n",
       "0  cfc06ae8-61f3-4e68-a10d-86c30663a847  2e3d5752-e2ec-49c7-bc66-a2a7c07875b4\n",
       "1  3bdcf8da-ac96-44d2-bdef-7a0f626588d1  dbf39945-c3ef-4fde-a98f-1fa7afe85d37\n",
       "2  aca2c3e5-d8e4-4430-b259-9a50ec3e2ba4  4e0637a7-b2da-43bb-9d8c-b538ae8353ef\n",
       "3  aca2c3e5-d8e4-4430-b259-9a50ec3e2ba4  28e6a7e3-7633-4d1c-90ac-9c260f56259c\n",
       "4  aca2c3e5-d8e4-4430-b259-9a50ec3e2ba4  5fba9ffc-b6d5-41d8-997e-d43ea196447a"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create cited_doc-doc match df\n",
    "\n",
    "cited_doc_df = pd.DataFrame(columns=['ref_id', 'doc_id'])\n",
    "\n",
    "for i, row in ref_df.iterrows():\n",
    "    for ref in row['cited_doc_id'].split(';'):\n",
    "        cited_doc_df.loc[len(cited_doc_df)] = [row['id'], ref]\n",
    "\n",
    "cited_doc_df.drop_duplicates(inplace=True)\n",
    "ref_df.drop(columns=['cited_doc_id'], inplace=True)\n",
    "\n",
    "cited_doc_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save data\n",
    "ref_df.to_csv(output_dir + '/db_ref.csv', index=False)\n",
    "par_df.to_csv(output_dir + '/db_par.csv', index=False)\n",
    "cited_doc_df.to_csv(output_dir + '/db_cited_doc.csv', index=False)\n",
    "doc_df.to_csv(output_dir + '/db_doc.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


###################################
#     3__structure_data.ipynb     #
###################################

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import json\n",
    "import os\n",
    "import re\n",
    "from uuid import uuid4\n",
    "from nltk.tokenize import MWETokenizer\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /home/deallab/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to use NLTK's TorqueNizer\n",
    "import nltk\n",
    "nltk.download('punkt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set dir name\n",
    "\n",
    "#inport settings\n",
    "sample = True\n",
    "\n",
    "#set input and output dir\n",
    "if sample:\n",
    "    input_dir = '../data/sample/2_clean_json'\n",
    "    output_dir = '../data/sample/3_structured_data'\n",
    "else:\n",
    "    input_dir = '../data/result/2_clean_json'\n",
    "    output_dir = '../data/result/3_structured_data'\n",
    "    \n",
    "#set ouput path if not exists\n",
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "# conditionize tokenizer\n",
    "tokenizer = MWETokenizer(separator='')\n",
    "tokenizer.add_mwe(('[', 'REF', ']'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "any([False])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "# helper \n",
    "\n",
    "#add doc to doc_df and / or return doc uuid\n",
    "def get_uuid_of_doc(title, pub_year, authors):\n",
    "    if not title:\n",
    "        title = 'unknown'\n",
    "        s = doc_df['title'].str.contains(re.escape('title'))\n",
    "    else:\n",
    "        s = doc_df['title'].str.contains(re.escape(title))\n",
    "        \n",
    "    if any(s) and doc_df[s]['pub_year'].iloc[0] == pub_year:\n",
    "        id = doc_df[s]['id'].iloc[0]\n",
    "        return id\n",
    "    else:\n",
    "        id = str(uuid4())\n",
    "        pub_year = pub_year if pub_year else 'unknown'\n",
    "        authors = authors if authors else 'unknown'\n",
    "        doc_df.loc[len(doc_df)] = [id, title, pub_year, authors]\n",
    "        return id\n",
    "\n",
    "# concat_authors\n",
    "def concat_auth(authors):\n",
    "    return ' ,'.join([' '.join([v if v is not None else 'unk' for v in auth.values()]) for auth in authors])\n",
    "\n",
    "def is_valid_ref(ref, targets):\n",
    "    match = re.search(r'<ref.*?target=\"(.*?)\">', ref) #match all ref tags (group 1 for REF and group 2 for GREF)\n",
    "    if match is None:\n",
    "        print(ref)\n",
    "    ref_ids = re.findall(r'(?:b|n)\\d{1,3}', match.group(1))\n",
    "    if 'n999' in ref_ids:\n",
    "        return False\n",
    "    return any([id in targets.keys() for id in ref_ids])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [],
   "source": [
    "ref_columns = ['id', 'ref_loc', 'type', 'cited_doc_id', 'par_id']\n",
    "par_columns = ['id', 'text', 'section_title', 'doc_id',]\n",
    "doc_columns = ['id', 'title', 'pub_year', 'authors']\n",
    "# create dataframes\n",
    "ref_df = pd.DataFrame(columns=ref_columns)\n",
    "par_df = pd.DataFrame(columns=par_columns)\n",
    "doc_df = pd.DataFrame(columns=doc_columns)\n",
    "\n",
    "unk_id = str(uuid4())\n",
    "doc_df.loc[0] = [unk_id, 'unknown', 'unknown', 'unknown' ]\n",
    "\n",
    "#load files\n",
    "for filename in os.listdir(input_dir):\n",
    "    if filename.endswith('.json'):  \n",
    "        input_file_path = os.path.join(input_dir, filename)\n",
    "        with open(input_file_path, 'r', encoding='utf-8') as file:\n",
    "            data = json.load(file)\n",
    "        \n",
    "        # add origin document\n",
    "        doc_id = get_uuid_of_doc(data['title'], data['pub_year'], concat_auth(data['authors'])) \n",
    "            \n",
    "        # add references\n",
    "        ref_id_targets = {} # dictionary mapping citation id (b23) to uuid of reference\n",
    "        for ref in data['references']:\n",
    "            ref_id_targets[ref['id']] = get_uuid_of_doc(ref['title'], ref['pub_year'], concat_auth(ref['authors']))\n",
    "            \n",
    "        #paragraphs\n",
    "        for section in data['sections']:\n",
    "            for paragraph_text in section['paragraphs']:\n",
    "                \n",
    "                refs = []\n",
    "                par_id = str(uuid4()) # set par id\n",
    "\n",
    "                #replace target values in text\n",
    "                references = re.findall(r'(<ref.*?<\\/ref>)', paragraph_text)\n",
    "                cleaned_text = re.sub(r'(<ref.*?<\\/ref>)', ' [REF] ', paragraph_text)\n",
    "\n",
    "                #replace all ;\n",
    "                cleaned_text = re.sub(r';', ',', cleaned_text)\n",
    "                 \n",
    "                # tokenized paragraph text\n",
    "                tokenized_text = tokenizer.tokenize(cleaned_text.split())\n",
    "                \n",
    "                #replace [REF] token with <ref> tags\n",
    "                ref_locs = [i for i, token in enumerate(tokenized_text) if '[REF]' in token]\n",
    "                if len(ref_locs) == len(references):\n",
    "                    for i, loc in enumerate(ref_locs):\n",
    "                        tokenized_text[loc] = re.sub(r' target=\".*?\"','',references[i])\n",
    "                else:\n",
    "                    print(f'The references array is of length {len(refs)} while the ref_locs array is of length {len(ref_locs)}')\n",
    "\n",
    "                # add par to par_df\n",
    "                par_df.loc[len(par_df)] = [par_id, ';'.join(tokenized_text), section['section_name'], doc_id]\n",
    "                \n",
    "                if references is None:\n",
    "                    continue\n",
    "                \n",
    "                for index, ref in enumerate(references):\n",
    "                    match = re.search(r'type=\"(.*?)\" target=\"(.*?)\"', ref)\n",
    "                    if match is None:\n",
    "                        print(ref)\n",
    "                    ref_type = match.group(1)\n",
    "                    ref_ids = [m.replace('#', '') for m in match.group(2).split(';')]\n",
    "                    cited_docs = [ref_id_targets[ref_id] if ref_id in ref_id_targets.keys() else unk_id for ref_id in ref_ids]\n",
    "                    ref_df.loc[len(ref_df)] = [uuid4(), ref_locs[index], ref_type, ';'.join(str(id) for id in cited_docs), par_id]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test structured data \n",
    "par_ids = par_df['id'].array\n",
    "doc_ids = doc_df['id'].array\n",
    "\n",
    "for i, row in ref_df.iterrows():\n",
    "    if row['par_id'] not in par_ids:\n",
    "        id = row['id']\n",
    "        print (f'par id in refs {id} not resolved')\n",
    "    for doc_id in row['cited_doc_id'].split(';'):\n",
    "        if doc_id == 'unknown':\n",
    "            continue\n",
    "        if doc_id not in doc_ids:\n",
    "            id = row['id']\n",
    "            print (f'doc id {doc_id} in refs {id} not resolved')\n",
    "\n",
    "for i, row in par_df.iterrows():\n",
    "    if row['doc_id'] not in doc_ids:\n",
    "        id = row['id']\n",
    "        print(f'doc id in pars {id} not resolved')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save df to csv\n",
    "ref_df.to_csv(output_dir + '/ref.csv', index=False)\n",
    "par_df.to_csv(output_dir + '/par.csv', index=False)\n",
    "doc_df.to_csv(output_dir + '/doc.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1137"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ref_df['par_id'].unique())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
